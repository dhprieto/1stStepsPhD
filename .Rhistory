}
# adding sweetener
for (i in seq(1, nrow(tabla))){
if (grepl(pattern = "A", x = tabla$grouping[i])){
tabla$Sweetener[i] <- "ST"
}
else if (grepl(pattern = "B", x = tabla$grouping[i])){
tabla$Sweetener[i] <- "SU"
}
else if (grepl(pattern = "C", x = tabla$grouping[i])){
tabla$Sweetener[i] <- "SA"
}
# adding numVol
if (length(tabla$grouping[i]) == 4){
tabla$numVol[i] <- as.numeric(substr(tabla$grouping[i],0,1))
if (tabla$Sweetener[i] == "SU"){
tabla$numVol[i] = tabla$numVol[i] + 50
}
else if (tabla$Sweetener[i] == "SA"){
tabla$numVol[i] = tabla$numVol[i] + 100
}
}
else {
tabla$numVol[i] <- as.numeric(substr(tabla$grouping[i],0,2))
if (tabla$Sweetener[i] == "SU"){
tabla$numVol[i] = tabla$numVol[i] + 50
}
else if (tabla$Sweetener[i] == "SA"){
tabla$numVol[i] = tabla$numVol[i] + 100
}
}
if (grepl(pattern = "F", x = tabla$grouping[i])){
tabla$Time[i] <- "Final"
}
else if (grepl(pattern = "([A-C])0", x = tabla$grouping[i])){
tabla$Time[i] <- "Initial"
}
}
tableSex <- read.csv("../../effectsSexIntakers/data/chronicSexVolunteers.csv", sep = ";", dec = ",")
tabla <- merge(tabla, tableSex, by = "numVol")
tabla$Sex[tabla$Sex == "HOMBRE"] <- "MAN"
tabla$Sex[tabla$Sex == "MUJER"] <- "WOMAN"
return(tabla)
}
normalizingNumeric <- function(tableComplete) {
for (i in colnames(tableComplete)){
if (is.numeric(tableComplete[,i]) && i != "numVol"){
tableComplete[,i] <- scales::rescale(tableComplete[,i])
}
}
return (tableComplete)
}
factoringImputating <- function(tableNorm){
tableNorm$Sweetener <- factor(tableNorm$Sweetener)
tableNorm$Sex <- factor(tableNorm$Sex)
tableNorm$Time <- factor(tableNorm$Time)
return(tableNorm)
}
estadisticosDescriptivos <- function (tabla) {
#Encabezados de cada estadístico como un vector
nombres <- c("Mínimo", "Q1", "Media", "Media recortada", "Mediana", "Moda",
"Varianza", "Desviación Estándar", "Q3", "Máximo", "Simetría", "Curtosis")
descr2 <- data.frame(matrix(ncol = length(nombres), nrow = 0))
for (i in colnames(tabla)) {
if (is.numeric(tabla[, i]) & i != "numVol"){
min <- min(tabla[, i], na.rm = TRUE)
q1 <- quantile(tabla[, i], probs = 0.25, na.rm = TRUE)
media <- mean.default(tabla[, i], na.rm = TRUE)
media_rec <- mean.default(tabla[, i], trim = 0.025, na.rm = TRUE)
mediana <- median.default(tabla[, i], na.rm = TRUE)
moda <- mfv1(tabla[, i])
var <- var(tabla[, i], na.rm = TRUE)
desvest <- sd(tabla[, i], na.rm = TRUE)
q3 <- quantile(tabla[, i], probs = 0.75, na.rm = TRUE)
max <- max(tabla[, i], na.rm = TRUE)
s <- skew(tabla[, i])
c <- kurtosi(tabla[, i])
#Valores de estadísticos como vector
descriptivos <- as.numeric(c(min, q1, media, media_rec, mediana, moda,
var, desvest, q3, max, s, c))
descr2 <- as.data.frame(rbind(descr2, descriptivos))
colnames(descr2) <- nombres
}
}
rownames(descr2) <- colnames(tabla)[!(colnames(tabla) %in% c("numVol", "grouping","Sex", "Time", "Sweetener"))]
return (descr2)
}
# timing the features
timingCleanFeatures <- function(tabla, pathToTable){
if (pathToTable == "data/chronicPlasmAnt.csv"){
rename(tabla, CA = Caffeic.Acid..CA..1, CA.Gluc = CA.Gluc.1, CA.Sulfate = CA.Sulfate.1, Total.CA = TOTAL.CA.1,
DHPAA = X3.4.Dihidroxiphenilacetic.acid..DHPAA..1, DHPAA.Gluc = DHPAA.Gluc.1, DHPAA.di.Gluc = DHPAA.di.Gluc.1,
DHPAA.Gluc.Sulfate = DHPAA.Gluc.sulfate.1, DHPAA.di.Sulfate = DHPAA.di.Sulfate.1, Total.DHPAA = TOTAL.DHPAA.1,
TFA.Gluc = TFA.Gluc.1, TFA.Sulfate = TFA.Sulfate.1, Total.TFA = TOTAL.TFA.1, VA = Vanillic.Acid..VA..1,
VA.GG = VA.GG.1, VA.Sulfate = VA.Sulfate.1, VA.Gluc.Sulfate = VA.Gluc.sulfate.1,
VA.di.Sulfate = VA.di.sulfate.1, Total.VA = Total.VA.1)
}
else if(pathToTable == "data/chronicPlasmFlav.csv"){
rename(tabla, E = Eriodictiol..E..1, ES = ES.1 , Total.E = TOTAL.E.1, HE.G = HE.G.1, NG = NG.1)
}
else if(pathToTable == "data/chronicUrineFlav.csv"){
rename(tabla, E = Eriodyctiol..E..1, EG = ES.1, ES = ES.1 , Total.E = TOTAL.E.1, HE = HE.1, HE.G = HE.G.1,
HE.GG = HE.GG.1, Total.HE = TOTAL.HE.1, N = Naringenine..N..1, NG = NG.1, NGG = NGG.1, NS = NS.1,
Total.N = TOTAL.N.1)
}
else if (pathToTable == "data/chronicUrineAnt.csv"){
rename(tabla, CA = Caffeic.acid..CA..1, CA.Gluc = CA.Gluc.1, CA.Sulfate = CA.Sulfate.1,
CA.Gluc.Sulfate = CA.Gluc.sulfate.1, Total.CA = TOTAL.CA.1,
DHPAA = X3.4...Dihidroxiphenilacetic.acid..DHPAA..1,
DHPAA.Gluc = DHPAA.Gluc.1, DHPAA.di.Gluc = DHPAA.di.Gluc.1, DHPAA.Gluc.Sulfate = DHPAA.Gluc.sulfate.1,
DHPAA.di.Sulfate = DHPAA.di.Sulfate.1, Total.DHPAA = TOTAL.DHPAA.1, TFA.Gluc = TFA.Gluc.1,
TFA.Sulfate = TFA.Sulfate.1, Total.TFA = TOTAL.TFA.1, VA = Vanillic.Acid..VA..1, VA.GG = VA.GG.1,
VA.Gluc.Sulfate = VA.Gluc.sulfate.1, VA.di.Sulfate = VA.di.sulfate.1, Total.VA = Total.VA.1)
}
# return(tabla)
}
# Función para realizar la anova de tres vías sobre una variable
# Imprime por pantalla el resultado
aov_test <- function(tabla, variable){
tablaVar <- tabla %>% select(numVol, Sweetener, Sex, Time, variable)
# tablaVar <- tablaVar[!tablaVar[[5]] %in% boxplot.stats(tablaVar[[5]])$out,]
res.aov <- anova_test(data = ungroup(tablaVar), dv=variable, wid=numVol,
between = c(Sex, Sweetener), within= Time)
tablaAnova <- get_anova_table(res.aov, correction = "auto")
print(tablaAnova)
}
# Función para hacer en bucle el análisis anova a lo largo de una tabla
aov_loop <- function(tabla, varsRemoved){
# remover no duplicados
if (deparse(substitute(tabla)) %in% c("urineAnt", "urineFlav")){
counts <- data.frame(table(tabla$numVol))
tabla <- tabla[tabla$numVol %in% counts$Var1[counts$Freq > 1],]
print("yuuuuuuuuuuuuuuuuuuhu")
}
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in colnames(tabla)[-1]){
if (is.numeric(tabla[,i]) && !(i %in% varsRemoved)){
message(paste("Variable analizada: ", i))
aov_test(tabla,i)
}
}
}
anovaTests <- function(tabla, varsRemoved) {
aov_loop(tabla, varsRemoved)
pairwiseTTest(tabla, varsRemoved)
}
boxplotBias <- function(vars, table1.0, factore, removeOutliers = F, titlePLot ){
# reading table
table1.1 <- table1.0 %>% select (all_of(vars), Time, Sex, Sweetener, -c(numVol, grouping))
if (removeOutliers){
for (i in colnames(table1.1)) {
if (is.numeric(table1.1[,i])){
table1.1 <- table1.1[!table1.1[, i] %in% boxplot.stats(table1.1[,i])$out,]
}
}
# return(table1.1)
}
# long table format
table1.2 <- melt(table1.1, id = c("Time", "Sex", "Sweetener"))
# plot factors
bxp <- function(longTable, factore){
if (factore == "Time") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore],
levels = c("Initial", "Final")))) +
geom_boxplot()+
ggtitle(titlePLot)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5))+
labs(y = "standarized value", x = "variables", fill = "Time")
}
else if (factore == "Sex") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore]))) +
geom_boxplot()+
ggtitle(paste(titlePLot))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5))+
labs(y = "standarized value", x = "variables", fill = "Sex")+
scale_fill_brewer(palette = "Reds")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
else{
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore])), colour = "Sweetener") +
geom_boxplot()+
ggtitle(titlePLot)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5))+
labs(y = "standarized value", x = "variables", fill = "Sweetener")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
}
bxp(table1.2, factore)
}
pairwiseTTest <- function(tabla, varsRemoved){
for (i in colnames(tabla)){
if (is.numeric(tabla[,i]) & !(i %in% varsRemoved)){
message(paste("Analized variable: ", i))
message(paste("Time comparisons ", i))
print(pairwise_t_test(data = tabla , formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni")
%>% dplyr::select(-df, -statistic))
tablaGr <- group_by(tabla, Sweetener, Sex)
message(paste("Time-Sweetener-Sex comparisons", i))
print(pairwise_t_test(data = tablaGr, formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni") %>% dplyr::select(-df, -statistic))
tablaGr <- group_by(tabla, Sweetener)
message(paste("Time-Sweetener comparisons", i))
print(pairwise_t_test(data = tablaGr , formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni") %>% dplyr::select(-df, -statistic))
tablaGr <- group_by(tabla, Sex)
message(paste("Time-Sex comparisons", i))
print(pairwise_t_test(data = tablaGr , formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni") %>% dplyr::select(-df, -statistic))
}
}
}
main1prepoc <- function(pathToTable, pathtoRealTable){
tabla1.0 <- readingFillingGrouping(pathToTable)
tabla1.1 <- normalizingNumeric(tabla1.0)
tabla1.2 <- factoringImputating(tabla1.1)
#tabla1.2_stats <- estadisticosDescriptivos(urAnt1.2)
tabla1.3 <- timingCleanFeatures(tabla1.2, pathtoRealTable)
return (tabla1.3)
}
urineAnt$CA.Gluc.Sulfate
urineAnt$CA.Gluc.Sulfate <- as.numeric(urineAnt$CA.Gluc.Sulfate)
urineAntImp <- impute_cart(dat = urineAnt, formula = CA + CA.Gluc + CA.Gluc.Sulfate+ Total.CA+ DHPAA+ DHPAA.Gluc + DHPAA.Gluc.Sulfate + DHPAA.di.Sulfate + Total.DHPAA + TFA.Gluc + TFA.Sulfate+ VA+ VA.GG +  VA.Gluc.Sulfate+ VA.di.Sulfate
~ Sweetener + Sex + Time + Total.TFA + Total.VA)
table1.5_initial <-  urineAntImp %>%
filter(Time == "Initial") %>%
select(-c(grouping, Sweetener, Sex, numVol, Time, CA.Sulfate, DHPAA.di.Gluc, TFA.di.sulfate.1, TIFA.Sulfate.1)) %>%
mutate_if(is.character,as.numeric) #%>% drop_na()
table1.5_final <-  urineAntImp %>%
filter(Time == "Final") %>%
select(-c(grouping, Sweetener, Sex, numVol, Time, CA.Sulfate, DHPAA.di.Gluc, TFA.di.sulfate.1, TIFA.Sulfate.1)) %>%
mutate_if(is.character,as.numeric)
comparisonTI <- clValid(
obj        = table1.5_initial,
nClust     = 2:6,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
comparisonTI <- clValid(
obj        = table1.5_initial,
nClust     = 2:6,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
comparisonTF <- clValid(
obj        = table1.5_final,
nClust     = 2:6,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
summary(comparisonTI)
summary(comparisonTI)
summary(comparisonTF)
distances <- dist(urineAntImp, method = "manhattan")
sapply(urineAntImp, function(x) sum(is.na(x)))
distances <- dist(table1.5_initial, method = "manhattan")
hc_diana <- diana(x = distances)
hc_diana <- diana(x = distances, metric = "manhattan")
clusters_initial <- cutree (hc_diana, k = 6)
pca_initial <- prcomp(table1.5_initial, scale = T)
fviz_pca_biplot(pca_initial, habillage = clusters_initial)
fviz_pca_biplot(pca_initial, habillage = clusters_initial)
clusters_final <- kmeans(x = table1.5_final, k = 6)
clusters_final <- kmeans(x = table1.5_final, centers = 6)
pcaFinal <- prcomp(table1.5_final, scale = T)
fviz_pca_biplot(pcaFinal, habillage = clusters_final)
fviz_pca_biplot(pcaFinal, habillage = clusters_final$cluster)
urineFlav <- main1prepoc("../../effectsSexIntakers/data/chronicUrineFlav.csv", "data/chronicUrineFlav.csv")
sapply(urineFlav, function(x) sum(is.na(x)))
urineFlavImp <- impute_cart(urineFlav, E + EG + ES + HE.G + N + NG + NGG + NS ~ Sweetener + Sex + Time otal.E + HE + HE.GG + Total.HE + Total.N)
urineFlavImp <- impute_cart(urineFlav, E + EG + ES + HE.G + N + NG + NGG + NS ~ Sweetener + Sex + Time + Total.E + HE + HE.GG + Total.HE + Total.N)
urineFlavImp <- impute_cart(urineFlav, E + EG.1 + ES + HE.G + N + NG + NGG + NS ~ Sweetener + Sex + Time + Total.E + HE + HE.GG + Total.HE + Total.N)
table1.5_initial <-  urineFlavImp %>%
filter(Time == "Initial") %>%
select(-c(grouping, Sweetener, Sex, numVol, Time, Total.E)) %>%
mutate_if(is.double,as.numeric) #%>% drop_na()
table1.5_final <-  urineFlavImp %>%
filter(Time == "Final") %>%
select(-c(grouping, Sweetener, Sex, numVol, Time, Total.E)) %>%
mutate_if(is.double,as.numeric)
comparisonTI <- clValid(
obj        = table1.5_initial,
nClust     = 2:9,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
comparisonTI <- clValid(
obj        = table1.5_initial,
nClust     = 2:9,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
comparisonTF <- clValid(
obj        = table1.5_final,
nClust     = 2:6,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
summary(comparisonTI)
summary(comparisonTF)
comparisonTI <- clValid(
obj        = table1.5_initial,
nClust     = 2:6,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
summary(comparisonTI)
clusters_initial <- kmeans(x = table1.5_initial, centers = 6)
pca_initial <- prcomp(table1.5_initial, scale = T)
fviz_pca_biplot(pca_initial, habillage = clusters_initial$cluster)
fviz_pca_biplot(pca_initial, habillage = clusters_initial$cluster)
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
library(kohonen)
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(table1.5_final,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood="circular" )
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(table1.5_final,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(as.matrix(table1.5_final),
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
View(plasmFlav)
View(som_grid)
som_grid <- somgrid(xdim = 4, ydim=4, topo="hexagonal")
View(som_grid)
som_grid <- somgrid(xdim = 8, ydim=8, topo="hexagonal")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(as.matrix(table1.5_final),
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
plot(som_model)
som_cluster <- cutree(hclust(dist(som_model$codes)), k = 6)
som_model$codes
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k = 6)
pcaFinal <- prcomp(table1.5_final, scale = T)
fviz_pca_biplot(pcaFinal, habillage = som_cluster)
som_grid <- somgrid(xdim = 15, ydim=5, topo="hexagonal")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(as.matrix(table1.5_final),
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k = 6)
pcaFinal <- prcomp(table1.5_final, scale = T)
fviz_pca_biplot(pcaFinal, habillage = som_cluster)
125/5
125/15
125/20
125/25
125/7
125/8
125/9
125/10
125/12
125/15
som_grid <- somgrid(xdim = 25, ydim=5, topo="hexagonal")
# Finally, train the SOM, options for the number of iterations,
# the learning rates, and the neighbourhood are available
som_model <- som(as.matrix(table1.5_final),
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE)
som_cluster <- cutree(hclust(dist(som_model$codes[[1]])), k = 6)
pcaFinal <- prcomp(table1.5_final, scale = T)
fviz_pca_biplot(pcaFinal, habillage = som_cluster)
fviz_pca_biplot(pcaFinal, habillage = som_cluster)
correlatedFeatures <- function (tabla) {
numericFeatures <- tabla[,unlist(lapply(tabla,is.numeric))]
corrMatrix <- cor(numericFeatures)
highcorr <- findCorrelation(corrMatrix, 0.5)
print(highcorr)
}
correlatedFeatures(urineFlav)
urineFlav[,8]
colnames(urineFlav)[8]
colnames(urineFlav)[c(8,14)]
correlatedFeatures <- function (tabla) {
numericFeatures <- tabla[,unlist(lapply(tabla,is.numeric))]
corrMatrix <- cor(numericFeatures)
highcorr <- findCorrelation(corrMatrix, 0.75)
print(highcorr)
}
correlatedFeatures(urineFlav) # 8 , 14
correlatedFeatures(urineFlav) # 8
colnames(urineFlav)[8]
colnames(urineFlav)
# 8
colnames(urineFlav)[correlatedFeatures(urineFlav)] #
colnames(urineAnt)[correlatedFeatures(urineAnt)] #
correlatedFeatures(urineAnt)
colnames(plasmAnt)[correlatedFeatures(plasmAnt)] #
colnames(plasmFlav)[correlatedFeatures(plasmFlav)] #
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=urineFlav, method="lvq",
trControl=control)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=urineFlavImp, method="lvq", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=urineFlav %>%select(-c(grouping, Sweetener, Sex, numVol, Time)), method="lvq", trControl=control)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=urineFlav %>%select(-c(grouping, Sweetener, numVol, Time)), method="lvq", trControl=control)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=urineFlavImp %>%select(-c(grouping, Sweetener, numVol, Time)), method="lvq", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
print(importance)
plot(importance)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=urineAntImp %>%select(-c(grouping, Sweetener, numVol, Time)), method="lvq", trControl=control)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=urineAntImp %>%select(-c(grouping, Sweetener, numVol, Time)), method="lvq", trControl=control)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=plasmFlavImp %>% select(-c(grouping, Sweetener, Sex, numVol, Time, DHPAA.di.Sulfate, TFA.Gluc, VA, VA.Sulfate)), method="lvq", trControl=control)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=plasmAntImp %>% select(-c(grouping, Sweetener, Sex, numVol, Time, DHPAA.di.Sulfate, TFA.Gluc, VA, VA.Sulfate)), method="lvq", trControl=control)
# train the model (maybe use %>%select(-all_of(anthro), -numVol, -grouping) %>% filter (Time == "Final"))
model <- train(Sex~., data=plasmAntImp %>% select(-c(grouping, Sweetener, numVol, Time, DHPAA.di.Sulfate, TFA.Gluc, VA, VA.Sulfate)), method="lvq", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
install.packages("Boruta")
install.packages("mlbench")
install.packages("randomForest")
library(Boruta)
library(mlbench)
library(caret)
library(randomForest)
boruta <- Boruta(Sex ~ ., data = urineFlav, doTrace = 2, maxRuns = 500)
boruta <- Boruta(Sex ~ ., data = urineFlavImp, doTrace = 2, maxRuns = 500)
plot(boruta)
plot(boruta)
boruta <- Boruta(Sex + Sweetener ~ ., data = urineFlavImp, doTrace = 2, maxRuns = 500)
boruta <- Boruta(Sex:Sweetener~ ., data = urineFlavImp, doTrace = 2, maxRuns = 500)
plot(boruta)
plot(boruta)
boruta <- Boruta(Sex:Sweetener~ . -numvol-grouping, data = urineFlavImp, doTrace = 2, maxRuns = 500)
urineFlavImp[-c("numVol", "grouping")]
urineFlavImp[-c("numVol", "grouping"),]
boruta <- Boruta(Sex:Sweetener~ ., data = urineFlavImp %>% select(-c(grouping, numVOl)), doTrace = 2, maxRuns = 500)
boruta <- Boruta(Sex:Sweetener~ ., data = urineFlavImp %>% select(-c(grouping, numVol)), doTrace = 2, maxRuns = 500)
plot(boruta)
plot(boruta)
borutaSex <- Boruta(Sex~ ., data = urineFlavImp %>% select(-c(grouping, numVol)), doTrace = 2, maxRuns = 500)
plot(borutaSex)
plot(boruta)
borutaTriple <- Boruta(Time:Sex:Sweetener~ ., data = urineFlavImp %>% select(-c(grouping, numVol)), doTrace = 2, maxRuns = 500)
plot(borutaTriple)
plasmFlav <- main1prepoc("../../effectsSexIntakers/data/chronicPlasmFlav.csv", "data/chronicPlasmFlav.csv")
sapply(plasmFlav, function(x) sum(is.na(x)))
plasmFlavImp <- impute_cart(plasmFlav, E+ES ~ Sweetener + Sex + Time+ HE.G + NG)
table1.5_initial <-  plasmFlavImp %>%
filter(Time == "Initial") %>%
select(-c(grouping, Sweetener, Sex, numVol, Time, Total.E)) %>%
mutate_if(is.double,as.numeric) #%>% drop_na()
table1.5_final <-  plasmFlavImp %>%
filter(Time == "Final") %>%
select(-c(grouping, Sweetener, Sex, numVol, Time, Total.E)) %>%
mutate_if(is.double,as.numeric)
model_clustering_OF <- Mclust(table1.5_initial, G = 3)
p1I <- fviz_mclust(object = model_clustering_OF, what = "BIC", pallete = "jco",
title = paste("Model Selection  Plasm Flavanones Initial Time")) + scale_x_discrete(limits = c(1:10))
pcaPF <- prcomp(table1.5_initial, scale = T)
fviz_pca_biplot(pcaPF, habillage = model_clustering_OF$classification)
distances <- dist(x = table1.5_final[-c(55,105),], method = "manhattan")
hc_diana <- diana(x = distances, diss = TRUE, metric = "manhattan")
fviz_dend(hc_diana, k = 4)
fviz_dend(hc_diana, k = 4)
clusters_final <- cutree(tree = hc_diana, k = 4)
pcaFinal <- prcomp(table1.5_final[-c(55,105),], scale = T)
fviz_pca_biplot(pcaFinal, habillage = clusters_final)
fviz_pca_biplot(pcaFinal, habillage = clusters_final, addEllipses = T)
plot(borutaSex)

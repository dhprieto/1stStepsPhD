table$Endulzante[i] <- "SU"
}
else if (grepl(pattern = "C", x = table$X[i])){
table$Endulzante[i] <- "SA"
}
}
if (grepl("agudo", tablePath)){agudo = T}
else {agudo = F}
if(agudo){
for (i in seq(1, nrow(table))){
if (grepl(pattern = "([A-C]) -1", x = table$X[i])){
table$Tiempo[i] <- "-1"
}
else if (grepl(pattern = "([A-C]) 3,5", x = table$X[i])){
table$Tiempo[i] <- "3,5"
}
else if (grepl(pattern = "([A-C]) 12", x = table$X[i])){
table$Tiempo[i] <- "12"
}
else if (grepl(pattern = "([A-C]) 24", x = table$X[i])){
table$Tiempo[i] <- "24"
}
}
for (i in seq(1, nrow(table))){
table$numVol[i] <- as.integer(gsub("U.*", "", table[,1][i]))
}
}
else {
for (i in seq(1, nrow(table))){
if (grepl(pattern = "F", x = table$X[i])){
table$Tiempo[i] <- "Final"
}
if (grepl(pattern = "([A-C])0", x = table$X[i])){
table$Tiempo[i] <- "0"
}
}
for (i in seq(1, nrow(table))){
table$numVol[i] <- gsub("[A-C].", "", table[,1][i])
}
}
table <- table[,colSums(is.na(table))<(nrow(table)*nasPercentageCol)]
if (nasRow == T){
table <- na.omit(table)
}
addAntro <- function (pathToAntro, table) {
antro <- read.csv(pathToAntro, sep = ";", dec = ",")
for (i in seq(1,nrow(antro))){
if (antro$Nº.Volunt.[i] <= 46){
antro$Endulzante[i] <- "ST"
}
if ((antro$Nº.Volunt.[i] >= 51) & (antro$Nº.Volunt.[i] <= 96)){
antro$Endulzante[i] <- "SU"
antro$Nº.Volunt.[i] <- antro$Nº.Volunt.[i]-50
}
if ((antro$Nº.Volunt.[i] >= 101) & (antro$Nº.Volunt.[i] <= 146)){
antro$Endulzante[i] <- "SA"
antro$Nº.Volunt.[i] <- antro$Nº.Volunt.[i]-100
}
}
table$numVol <- as.integer(table$numVol)
table <- merge(x= table, y= antro, by.x = c("numVol","Endulzante"), by.y= c("Nº.Volunt.", "Endulzante"), all=T)
sexVol <- read.csv("data/sexoVoluntarios.csv", sep = ";")
table <- merge(x=table, y=sex, by.x="numVol", by.y="Voluntario", all=T)
return(table)
}
table <- addAntro("data/datosAntropometricosCardiovasculares.csv",table)
table <- table[order(table$Endulzante, table$Tiempo,table$numVol),]
return(na.omit(table))
}
preprocess <- function(tablePath, nasPercentageCol, nasRow){
table <- read.csv(tablePath, sep = ";", dec = ",")
for (i in seq(1, nrow(table))){
if (grepl(pattern = "A", x = table$X[i])){
table$Endulzante[i] <- "ST"
}
else if (grepl(pattern = "B", x = table$X[i])){
table$Endulzante[i] <- "SU"
}
else if (grepl(pattern = "C", x = table$X[i])){
table$Endulzante[i] <- "SA"
}
}
if (grepl("agudo", tablePath)){agudo = T}
else {agudo = F}
if(agudo){
for (i in seq(1, nrow(table))){
if (grepl(pattern = "([A-C]) -1", x = table$X[i])){
table$Tiempo[i] <- "-1"
}
else if (grepl(pattern = "([A-C]) 3,5", x = table$X[i])){
table$Tiempo[i] <- "3,5"
}
else if (grepl(pattern = "([A-C]) 12", x = table$X[i])){
table$Tiempo[i] <- "12"
}
else if (grepl(pattern = "([A-C]) 24", x = table$X[i])){
table$Tiempo[i] <- "24"
}
}
for (i in seq(1, nrow(table))){
table$numVol[i] <- as.integer(gsub("U.*", "", table[,1][i]))
}
}
else {
for (i in seq(1, nrow(table))){
if (grepl(pattern = "F", x = table$X[i])){
table$Tiempo[i] <- "Final"
}
if (grepl(pattern = "([A-C])0", x = table$X[i])){
table$Tiempo[i] <- "0"
}
}
for (i in seq(1, nrow(table))){
table$numVol[i] <- gsub("[A-C].", "", table[,1][i])
}
}
table <- table[,colSums(is.na(table))<(nrow(table)*nasPercentageCol)]
if (nasRow == T){
table <- na.omit(table)
}
addAntro <- function (pathToAntro, table) {
antro <- read.csv(pathToAntro, sep = ";", dec = ",")
for (i in seq(1,nrow(antro))){
if (antro$Nº.Volunt.[i] <= 46){
antro$Endulzante[i] <- "ST"
}
if ((antro$Nº.Volunt.[i] >= 51) & (antro$Nº.Volunt.[i] <= 96)){
antro$Endulzante[i] <- "SU"
antro$Nº.Volunt.[i] <- antro$Nº.Volunt.[i]-50
}
if ((antro$Nº.Volunt.[i] >= 101) & (antro$Nº.Volunt.[i] <= 146)){
antro$Endulzante[i] <- "SA"
antro$Nº.Volunt.[i] <- antro$Nº.Volunt.[i]-100
}
}
table$numVol <- as.integer(table$numVol)
table <- merge(x= table, y= antro, by.x = c("numVol","Endulzante"), by.y= c("Nº.Volunt.", "Endulzante"), all=T)
sexVol <- read.csv("data/sexoVoluntarios.csv", sep = ";")
table <- merge(x=table, y=sex, by.x="numVol", by.y="Voluntario", all=T)
return(table)
}
table <- addAntro("data/datosAntropometricosCardiovasculares.csv",table)
table <- table[order(table$Endulzante, table$Tiempo,table$numVol),]
return(na.omit(table))
}
tableName2 = "cronicoPlasmaAntLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
cronicoOrinaAnt_Antro <- preprocess (tablePath, 0.05, T)
preprocess <- function(tablePath, nasPercentageCol, nasRow){
table <- read.csv(tablePath, sep = ";", dec = ",")
for (i in seq(1, nrow(table))){
if (grepl(pattern = "A", x = table$X[i])){
table$Endulzante[i] <- "ST"
}
else if (grepl(pattern = "B", x = table$X[i])){
table$Endulzante[i] <- "SU"
}
else if (grepl(pattern = "C", x = table$X[i])){
table$Endulzante[i] <- "SA"
}
}
if (grepl("agudo", tablePath)){agudo = T}
else {agudo = F}
if(agudo){
for (i in seq(1, nrow(table))){
if (grepl(pattern = "([A-C]) -1", x = table$X[i])){
table$Tiempo[i] <- "-1"
}
else if (grepl(pattern = "([A-C]) 3,5", x = table$X[i])){
table$Tiempo[i] <- "3,5"
}
else if (grepl(pattern = "([A-C]) 12", x = table$X[i])){
table$Tiempo[i] <- "12"
}
else if (grepl(pattern = "([A-C]) 24", x = table$X[i])){
table$Tiempo[i] <- "24"
}
}
for (i in seq(1, nrow(table))){
table$numVol[i] <- as.integer(gsub("U.*", "", table[,1][i]))
}
}
else {
for (i in seq(1, nrow(table))){
if (grepl(pattern = "F", x = table$X[i])){
table$Tiempo[i] <- "Final"
}
if (grepl(pattern = "([A-C])0", x = table$X[i])){
table$Tiempo[i] <- "0"
}
}
for (i in seq(1, nrow(table))){
table$numVol[i] <- gsub("[A-C].", "", table[,1][i])
}
}
table <- table[,colSums(is.na(table))<(nrow(table)*nasPercentageCol)]
if (nasRow == T){
table <- na.omit(table)
}
addAntro <- function (pathToAntro, table) {
antro <- read.csv(pathToAntro, sep = ";", dec = ",")
for (i in seq(1,nrow(antro))){
if (antro$Nº.Volunt.[i] <= 46){
antro$Endulzante[i] <- "ST"
}
if ((antro$Nº.Volunt.[i] >= 51) & (antro$Nº.Volunt.[i] <= 96)){
antro$Endulzante[i] <- "SU"
antro$Nº.Volunt.[i] <- antro$Nº.Volunt.[i]-50
}
if ((antro$Nº.Volunt.[i] >= 101) & (antro$Nº.Volunt.[i] <= 146)){
antro$Endulzante[i] <- "SA"
antro$Nº.Volunt.[i] <- antro$Nº.Volunt.[i]-100
}
}
table$numVol <- as.integer(table$numVol)
table <- merge(x= table, y= antro, by.x = c("numVol","Endulzante"), by.y= c("Nº.Volunt.", "Endulzante"), all=T)
sexVol <- read.csv("data/sexoVoluntarios.csv", sep = ";")
table <- merge(x=table, y=sexVol, by.x="numVol", by.y="Voluntario", all=T)
return(table)
}
table <- addAntro("data/datosAntropometricosCardiovasculares.csv",table)
table <- table[order(table$Endulzante, table$Tiempo,table$numVol),]
return(na.omit(table))
}
tableName2 = "cronicoPlasmaAntLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
cronicoOrinaAnt_Antro <- preprocess (tablePath, 0.05, T)
View(cronicoOrinaAnt_Antro)
tableName2 = "cronicoPlasmaAntLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
saveRDS(tabla1, "data/cronicoPlasmaAnt_Antro.csv")
tableName2 = "cronicoOrinaAntLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
saveRDS(tabla1, "data/cronicoOrinaAnt_Antro.RDS")
write.csv(tabla1, "data/cronicoOrinaAnt_Antro.csv")
tableName2 = "cronicoPlasmaAntLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
write.csv(tabla1, "data/cronicoPlasmaAnt_Antro.csv")
tableName2 = "cronicoPlasmaFlavLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
write.csv(tabla1, "data/cronicoFlavAnt_Antro.csv")
tableName2 = "cronicoOrinaFlavLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
write.csv(tabla1, "data/cronicoFlavAnt_Antro.csv")
write.csv(tabla1, "data/cronicoOrinaAnt_Antro.csv")
tableName2 = "cronicoOrinaFlavLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
write.csv(tabla1, "data/cronicoOrinaFlav_Antro.csv")
tableName2 = "cronicoOrinaAntLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
write.csv(tabla1, "data/cronicoOrinaAnt_Antro.csv")
tableName2 = "cronicoPlasmaAntLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
write.csv(tabla1, "data/cronicoPlasmaAnt_Antro.csv")
tableName2 = "cronicoPlasmaFlavLimpio.csv"
rootDir = "data/"
tablePath = paste0(rootDir,tableName2)
tabla1 <- preprocess (tablePath, 0.05, T)
write.csv(tabla1, "data/cronicoPlasmaFlav_Antro.csv")
sexVol <- read.csv("data/sexoVoluntarios.csv", sep = ";")
library(dummies)
library(FNN)
library(factoextra)
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
set.A <- c_O_A.A[,-c(1,2,4)]
set.A_num <- set.A[,-c(1,7,26)]
fviz_nbclust(x = set.A_num, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(set.A_num, method = "pearson"), nstart = 50)
set.seed(123)
km_clusters <- kmeans(x = set.A_num, centers = 5, nstart = 1000)
fviz_nbclust(x = set.A_num, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(set.A_num, method = "pearson"), nstart = 50)
set.seed(123)
km_clusters <- kmeans(x = set.A_num, centers = 7, nstart = 1000, )
fviz_cluster(object = km_clusters, data = set.A_num,
show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "K-means - Cronico Orina Antocianos + Datos Antropométricos") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
View(set.A_num)
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
library(dplyr)
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
set.A <- c_O_A.A[,-c(1,2,4)]
set.A_num <- set.A[,-c(1,7,26)]
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
library(scales)
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
fviz_nbclust(x = set.A_rescaled, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(set.A_num, method = "pearson"), nstart = 50)
library(factoextra)
fviz_nbclust(x = set.A_rescaled, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(set.A_rescales, method = "pearson"), nstart = 50)
fviz_nbclust(x = set.A_rescaled, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(set.A_rescaled, method = "pearson"), nstart = 50)
set.seed(123)
km_clusters <- kmeans(x = set.A_num, centers = 6, nstart = 1000, )
km_clusters <- kmeans(x = set.A_rescaled, centers = 6, nstart = 1000, )
fviz_cluster(object = km_clusters, data = set.A_rescaled,
show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "K-means - Cronico Orina Antocianos + Datos Antropométricos") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
km_clusters <- kmeans(x = set.A_rescaled, centers = 5, nstart = 1000, )
fviz_cluster(object = km_clusters, data = set.A_rescaled,
show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "K-means - Cronico Orina Antocianos + Datos Antropométricos") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
fviz_nbclust(x = set.A_rescaled, FUNcluster = pam, method = "wss", k.max = 10,
diss = get_dist(set.A_rescaled, method = "manhattan"), nstart = 50)
library(cluster)
fviz_nbclust(x = set.A_rescaled, FUNcluster = pam, method = "wss", k.max = 10,
diss = get_dist(set.A_rescaled, method = "manhattan"), nstart = 50)
pam_clusters <- pam(x = set.A_rescaled, k = 4, metric = "manhattan")
pam_clusters
fviz_cluster(object = pam_clusters, data = set.A_rescaled, ellipse.type = "t",
repel = TRUE) +
theme_bw() +
labs(title = "PAM - Cronico Orina Antocianos + Datos Antropométricos") +
theme(legend.position = "none")
pam_clusters <- pam(x = set.A_rescaled, k = 7, metric = "manhattan")
fviz_cluster(object = pam_clusters, data = set.A_rescaled, ellipse.type = "t",
repel = TRUE) +
theme_bw() +
labs(title = "PAM - Cronico Orina Antocianos + Datos Antropométricos") +
theme(legend.position = "none")
pam_clusters <- pam(x = set.A_rescaled, k = 4, metric = "manhattan")
fviz_cluster(object = pam_clusters, data = set.A_rescaled, ellipse.type = "t",
repel = TRUE) +
theme_bw() +
labs(title = "PAM - Cronico Orina Antocianos + Datos Antropométricos") +
theme(legend.position = "none")
# Matriz de distancias euclídeas
mat_dist <- dist(x = set.A_rescaled, method = "manhattan")
# Dendrogramas con linkage complete y average
hc_euclidea_complete <- hclust(d = mat_dist, method = "complete")
hc_euclidea_average  <- hclust(d = mat_dist, method = "average")
cor(x = mat_dist, cophenetic(hc_euclidea_complete))
cor(x = mat_dist, cophenetic(hc_euclidea_average))
fviz_dend(x = hc_euclidea_complete, k = 2, cex = 0.6) +
geom_hline(yintercept = 5.5, linetype = "dashed") +
labs(title = "Herarchical clustering",
subtitle = "Distancia euclídea, Linkage complete, K=2")
fviz_dend(x = hc_euclidea_complete, k = 4, cex = 0.6) +
geom_hline(yintercept = 5.5, linetype = "dashed") +
labs(title = "Herarchical clustering",
subtitle = "Distancia euclídea, Linkage complete, K=4")
hopkins(set.A_rescaled, n = nrow(set.A_rescaled)-1)
library(clustertend)
set.seed(101)
hopkins(set.A_rescaled, n = nrow(set.A_rescaled)-1)
hopkins(datos_simulados, n = nrow(datos_simulados)-1)
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
library(purrr)
library(ggpubr)
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
hopkins(datos_simulados, n = nrow(datos_simulados)-1)
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p1 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = "Datos sexo") + theme(legend.position = "bottom")
p2 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = "Datos simulados") + theme(legend.position = "bottom")
library(factoextra)
library(dplyr)
library(scales)
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p1 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = "Datos sexo") + theme(legend.position = "bottom")
p2 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = "Datos simulados") + theme(legend.position = "bottom")
ggarrange(p1, p2)
library
library
library(purrr)
library(ggpubr)
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2, common.legend = TRUE)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Talla,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2, common.legend = TRUE)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Endulzante,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2, common.legend = TRUE)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos uwu",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
library(NbClust)
install.packages("NbClust")
numero_clusters <- NbClust(data = set.A_rescaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "alllong")
library(NbClust)
numero_clusters <- NbClust(data = set.A_rescaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "alllong")
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "alllong")
as.matrix(set.A_rescaled)
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "silhouette")
numero_clusters
fviz_nbclust(numero_clusters)
library(factoextra)
library(dplyr)
library(scales)
fviz_nbclust(numero_clusters)
numero_clusters <- NbClust(data = dist(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = as.matrix(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
fviz_nbclust(numero_clusters)
numero_clusters <- NbClust(data = as.matrix(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
scale(set.A_num)
?NbClust
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 5, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 5, method = "kmeans", index = "gap")
fviz_nbclust(numero_clusters)
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 5, method = "kmeans", index = c("kl","ch","hartigan",  "cindex", "db"))

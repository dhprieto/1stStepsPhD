ggarrange(p3,p4)
longtableIn[,"CA.GS"]
longtableIn
longtableIn
tablaClustersFn
tablaClustersFn
longtableIn %>% filter(variable == "CA.GS")
longtableIn %>% filter(variable == "CA.GS")
p5 <- ggplot(longtableIn %>% filter(variable == "CA.GS"), aes(variable, value, fill=clusters)) + geom_boxplot()
p5
p5 <- ggplot(longtableIn %>% filter(variable == "CA.GS"), aes(variable, value, fill=factor(clusters))) + geom_boxplot()
p5
p5 <- ggplot(longtableIn %>% filter(variable == "CA.GS"), aes(variable, value, fill=factor(clusters))) + geom_boxplot()+ ggtitle("A. Zoom on CA-GS at Initial Time")+
labs(y = "Standarized Value", x = "Bioactive molecules", fill = "Cluster")
p6 <- ggplot(longtableFn %>% filter(variable == "CA.GS"), aes(variable, value, fill=factor(clusters))) + geom_boxplot()+ ggtitle("A. Zoom on CA-GS at Initial Time")+
labs(y = "Standarized Value", x = "Bioactive molecules", fill = "Cluster")
p6 <- ggplot(longtableFn %>% filter(variable == "CA.GS"), aes(variable, value, fill=factor(clusters))) + geom_boxplot()+ ggtitle("B. Zoom on CA-GS at Final Time")+
labs(y = "Standarized Value", x = "Bioactive molecules", fill = "Cluster")
ggarrange(p5,p6)
clustersFn$clustering[66]
urineAnt["numVol" == 66]
urineAnt[urineAnt$numVol == 66]
urineAnt[urineAnt$numVol == 66,]
scale(c(2.88,1.31))
norm(c(2.88,1.31))
View(normalizingNumeric)
scales::rescale(c(2.88,1.31))
write.csv(estadisticosDescriptivos(urineAntImp), "../supplementary/descriptivosPlasmAnt")
urineAntImp
urineAntImp
write.csv(estadisticosDescriptivos(urineFlavImp), "../supplementary/descriptivosFlavAnt")
write.csv(estadisticosDescriptivos(urineAnt_nodup), "../supplementary/descriptivosPlasmAnt")
write.csv(estadisticosDescriptivos(urineAntImp), "../supplementary/descriptivosPlasmAnt")
write.csv(estadisticosDescriptivos(plasmAntImp), "../supplementary/descriptivosPlasmAnt")
plasmFlavImp <- impute_cart(plasmFlav, E+E.S ~ Sweetener + Sex + Time+ HE.G + N.G)
plasmAntImp <- impute_cart(dat = plasmAnt, formula = CA+ CA.G+ CA.S+ DHPAA.G+ DHPAA.GG+ DHPAA.GS + TFA.S+ VA.GG+ VA.SS ~ Sweetener + Sex + Time + Total.CA + DHPAA+Total.DHPAA+ Total.TFA+VA.GG+ Total.VA)
write.csv(estadisticosDescriptivos(plasmAntImp), "../supplementary/descriptivosPlasmAnt")
write.csv(estadisticosDescriptivos(plasmFlavImp), "../supplementary/descriptivosFlavAnt")
write.csv(estadisticosDescriptivos(urineFlavImp), "../supplementary/descriptivosUrineFlav")
write.csv(estadisticosDescriptivos(urineAntImp), "../supplementary/descriptivosUrineAnt")
urineAntImp
urineAntImp
View(urineAntImp)
View(urineFlavImp)
write.csv(estadisticosDescriptivos(urineAntImp), "../supplementary/descriptivosUrineAnt")
estadisticosDescriptivos <- function (tabla) {
#Encabezados de cada estadístico como un vector
nombres <- c("Mínimo", "Q1", "Media", "Media recortada", "Mediana", "Moda",
"Varianza", "Desviación Estándar", "Q3", "Máximo", "Simetría", "Curtosis")
descr2 <- data.frame(matrix(ncol = length(nombres), nrow = 0))
for (i in colnames(tabla)) {
if (is.numeric(tabla[, i]) & i != "numVol"){
min <- min(tabla[, i], na.rm = TRUE)
q1 <- quantile(tabla[, i], probs = 0.25, na.rm = TRUE)
media <- mean.default(tabla[, i], na.rm = TRUE)
media_rec <- mean.default(tabla[, i], trim = 0.025, na.rm = TRUE)
mediana <- median.default(tabla[, i], na.rm = TRUE)
moda <- mfv1(tabla[, i])
var <- var(tabla[, i], na.rm = TRUE)
desvest <- sd(tabla[, i], na.rm = TRUE)
q3 <- quantile(tabla[, i], probs = 0.75, na.rm = TRUE)
max <- max(tabla[, i], na.rm = TRUE)
s <- skew(tabla[, i])
c <- kurtosi(tabla[, i])
#Valores de estadísticos como vector
descriptivos <- as.numeric(c(min, q1, media, media_rec, mediana, moda,
var, desvest, q3, max, s, c))
descr2 <- as.data.frame(rbind(descr2, descriptivos))
colnames(descr2) <- nombres
}
}
# rownames(descr2) <- colnames(tabla)[!(colnames(tabla) %in% c("numVol", "grouping","Sex", "Time", "Sweetener"))]
return (descr2)
}
write.csv(estadisticosDescriptivos(urineAntImp), "../supplementary/descriptivosUrineAnt")
View(urineAntImp)
View(urineAnt_nodup)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(psych)
library(modeest)
library(caret)
library(rstatix)
library(AppliedPredictiveModeling)
library(reshape2)
library(clValid)
library(mclust)
library(factoextra)
library(ggpubr)
library(simputation)
library(cluster)
library(Boruta)
library(mlbench)
library(caret)
library(randomForest)
library(gridExtra)
library(RColorBrewer)
anthroSex <- function(tableRFG){
tableAnthro <- read.csv("../../effectsSexIntakers/data/chronicAnthropometricCardiovascularData.csv", sep = ";", dec = ",")
tableSex <- read.csv("../../effectsSexIntakers/data/chronicSexVolunteers.csv", sep = ";", dec = ",")
tableAnthroSex <- merge(tableAnthro, tableSex, by = "numVol")
tableComplete <- merge(tableRFG, tableAnthroSex, by = "numVol")
tableComplete$Sex[tableComplete$Sex == "HOMBRE"] <- "MAN"
tableComplete$Sex[tableComplete$Sex == "MUJER"] <- "WOMAN"
return(tableComplete)
}
readingFillingGrouping <- function(tablaPath){
tabla <- read.csv(tablaPath, sep = ";", dec = ".")
if (tablaPath == "../../effectsSexIntakers/data/chronicUrineFlav.csv"){
tabla <- read.csv(tablaPath, sep = ";", dec = ",")
}
# remove raw data from spectometry
for (i in colnames(tabla)){
if(substr(i, nchar(i), nchar(i)) != "1" & i != "grouping"){
tabla[,i] <- NULL
}
}
# adding sweetener
for (i in seq(1, nrow(tabla))){
if (grepl(pattern = "A", x = tabla$grouping[i])){
tabla$Sweetener[i] <- "ST"
}
else if (grepl(pattern = "B", x = tabla$grouping[i])){
tabla$Sweetener[i] <- "SU"
}
else if (grepl(pattern = "C", x = tabla$grouping[i])){
tabla$Sweetener[i] <- "SA"
}
# adding numVol
if (length(tabla$grouping[i]) == 4){
tabla$numVol[i] <- as.numeric(substr(tabla$grouping[i],0,1))
if (tabla$Sweetener[i] == "SU"){
tabla$numVol[i] = tabla$numVol[i] + 50
}
else if (tabla$Sweetener[i] == "SA"){
tabla$numVol[i] = tabla$numVol[i] + 100
}
}
else {
tabla$numVol[i] <- as.numeric(substr(tabla$grouping[i],0,2))
if (tabla$Sweetener[i] == "SU"){
tabla$numVol[i] = tabla$numVol[i] + 50
}
else if (tabla$Sweetener[i] == "SA"){
tabla$numVol[i] = tabla$numVol[i] + 100
}
}
if (grepl(pattern = "F", x = tabla$grouping[i])){
tabla$Time[i] <- "Final"
}
else if (grepl(pattern = "([A-C])0", x = tabla$grouping[i])){
tabla$Time[i] <- "Initial"
}
}
tableSex <- read.csv("../../effectsSexIntakers/data/chronicSexVolunteers.csv", sep = ";", dec = ",")
tabla <- merge(tabla, tableSex, by = "numVol")
tabla$Sex[tabla$Sex == "HOMBRE"] <- "MAN"
tabla$Sex[tabla$Sex == "MUJER"] <- "WOMAN"
return(tabla)
}
normalizingNumeric <- function(tableComplete) {
for (i in colnames(tableComplete)){
if (is.numeric(tableComplete[,i]) && i != "numVol"){
tableComplete[,i] <- scales::rescale(tableComplete[,i])
}
}
return (tableComplete)
}
factoringImputating <- function(tableNorm){
tableNorm$Sweetener <- factor(tableNorm$Sweetener)
tableNorm$Sex <- factor(tableNorm$Sex)
tableNorm$Time <- factor(tableNorm$Time)
return(tableNorm)
}
estadisticosDescriptivos <- function (tabla) {
#Encabezados de cada estadístico como un vector
nombres <- c("Mínimo", "Q1", "Media", "Media recortada", "Mediana", "Moda",
"Varianza", "Desviación Estándar", "Q3", "Máximo", "Simetría", "Curtosis")
descr2 <- data.frame(matrix(ncol = length(nombres), nrow = 0))
for (i in colnames(tabla)) {
if (is.numeric(tabla[, i]) & i != "numVol"){
min <- min(tabla[, i], na.rm = TRUE)
q1 <- quantile(tabla[, i], probs = 0.25, na.rm = TRUE)
media <- mean.default(tabla[, i], na.rm = TRUE)
media_rec <- mean.default(tabla[, i], trim = 0.025, na.rm = TRUE)
mediana <- median.default(tabla[, i], na.rm = TRUE)
moda <- mfv1(tabla[, i])
var <- var(tabla[, i], na.rm = TRUE)
desvest <- sd(tabla[, i], na.rm = TRUE)
q3 <- quantile(tabla[, i], probs = 0.75, na.rm = TRUE)
max <- max(tabla[, i], na.rm = TRUE)
s <- skew(tabla[, i])
c <- kurtosi(tabla[, i])
#Valores de estadísticos como vector
descriptivos <- as.numeric(c(min, q1, media, media_rec, mediana, moda,
var, desvest, q3, max, s, c))
descr2 <- as.data.frame(rbind(descr2, descriptivos))
colnames(descr2) <- nombres
}
}
rownames(descr2) <- colnames(tabla)[!(colnames(tabla) %in% c("numVol", "grouping","Sex", "Time", "Sweetener"))]
return (descr2)
}
# timing the features
timingCleanFeatures <- function(tabla, pathToTable){
if (pathToTable == "data/chronicPlasmAnt.csv"){
rename(tabla, CA = Caffeic.Acid..CA..1, CA.G = CA.Gluc.1,
CA.S = CA.Sulfate.1, Total.CA = TOTAL.CA.1,
DHPAA = X3.4.Dihidroxiphenilacetic.acid..DHPAA..1,
DHPAA.G = DHPAA.Gluc.1,
DHPAA.GG = DHPAA.di.Gluc.1,
DHPAA.GS = DHPAA.Gluc.sulfate.1,
DHPAA.SS = DHPAA.di.Sulfate.1,
Total.DHPAA = TOTAL.DHPAA.1,
TFA.G = TFA.Gluc.1,
TFA.S = TFA.Sulfate.1, Total.TFA = TOTAL.TFA.1,
VA = Vanillic.Acid..VA..1,
VA.GG = VA.GG.1,
VA.S = VA.Sulfate.1,
VA.GS = VA.Gluc.sulfate.1,
VA.SS = VA.di.sulfate.1, Total.VA = Total.VA.1)
}
else if(pathToTable == "data/chronicPlasmFlav.csv"){
rename(tabla, E = Eriodictiol..E..1,
E.S = ES.1 ,
Total.E = TOTAL.E.1,
HE.G = HE.G.1, N.G = NG.1)
}
else if(pathToTable == "data/chronicUrineFlav.csv"){
rename(tabla,
E = Eriodyctiol..E..1, E.G = ES.1, E.S = ES.1 , Total.E = TOTAL.E.1,
HE = HE.1, HE.G = HE.G.1,
HE.GG = HE.GG.1, Total.HE = TOTAL.HE.1,
N = Naringenine..N..1, N.G = NG.1, N.GG = NGG.1, N.S = NS.1,
Total.N = TOTAL.N.1)
}
else if (pathToTable == "data/chronicUrineAnt.csv"){
rename(tabla,
CA = Caffeic.acid..CA..1,
CA.G= CA.Gluc.1, CA.S = CA.Sulfate.1,
CA.GS = CA.Gluc.sulfate.1, Total.CA = TOTAL.CA.1,
DHPAA = X3.4...Dihidroxiphenilacetic.acid..DHPAA..1,
DHPAA.G = DHPAA.Gluc.1, DHPAA.GG = DHPAA.di.Gluc.1,
DHPAA.GS = DHPAA.Gluc.sulfate.1,
DHPAA.SS = DHPAA.di.Sulfate.1, Total.DHPAA = TOTAL.DHPAA.1,
TFA.G = TFA.Gluc.1, TFA.S = TFA.Sulfate.1, Total.TFA = TOTAL.TFA.1,
VA = Vanillic.Acid..VA..1, VA.GG = VA.GG.1,
VA.GS = VA.Gluc.sulfate.1, VA.SS = VA.di.sulfate.1, Total.VA = Total.VA.1)
}
# return(tabla)
}
# Función para realizar la anova de tres vías sobre una variable
# Imprime por pantalla el resultado
aov_test <- function(tabla, variable){
tablaVar <- tabla %>% select(numVol, Sweetener, Sex, Time, variable)
# tablaVar <- tablaVar[!tablaVar[[5]] %in% boxplot.stats(tablaVar[[5]])$out,]
res.aov <- anova_test(data = ungroup(tablaVar), dv=variable, wid=numVol,
between = c(Sex, Sweetener), within= Time)
tablaAnova <- get_anova_table(res.aov, correction = "auto")
print(tablaAnova)
print(eta_squared(tablaAnova))
}
# Función para hacer en bucle el análisis anova a lo largo de una tabla
aov_loop <- function(tabla, varsRemoved){
# remover no duplicados
if (deparse(substitute(tabla)) %in% c("urineAnt", "urineFlav")){
counts <- data.frame(table(tabla$numVol))
tabla <- tabla[tabla$numVol %in% counts$Var1[counts$Freq > 1],]
}
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in colnames(tabla)[-1]){
if (is.numeric(tabla[,i]) && !(i %in% varsRemoved)
&& !(i == "numVol")){
message(paste("Variable analizada: ", i))
aov_test(tabla,i)
}
}
}
anovaTests <- function(tabla, varsRemoved) {
aov_loop(tabla, varsRemoved)
pairwiseTTest(tabla, varsRemoved)
}
boxplotBias <- function(vars = NULL, table1.0, factore, removeOutliers = F, titlePLot, x_label ){
# reading table
table1.1 <- table1.0 %>% select (all_of(vars), Time, Sex, Sweetener, -c(numVol, grouping))
if (removeOutliers){
for (i in colnames(table1.1)) {
if (is.numeric(table1.1[,i])){
table1.1 <- table1.1[!table1.1[, i] %in% boxplot.stats(table1.1[,i])$out,]
}
}
# return(table1.1)
}
# long table format
table1.2 <- melt(table1.1, id = c("Time", "Sex", "Sweetener"))
# plot factors
bxp <- function(longTable, factore, x_label){
if (factore == "Time") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore],
levels = c("Initial", "Final")))) +
geom_boxplot()+
ggtitle(titlePLot)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5))+
labs(y = "standarized value", x = x_label, fill = "Time")
}
else if (factore == "Sex") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore]))) +
geom_boxplot()+
ggtitle(paste(titlePLot))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5))+
labs(y = "standarized value", x = x_label, fill = "Sex")+
scale_fill_brewer(palette = "Reds")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
else if (factore == "Sweetener"){
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore])), colour = "Sweetener") +
geom_boxplot()+
ggtitle(titlePLot)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5))+
labs(y = "standarized value", x = x_label, fill = "Sweetener")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
}
bxp(table1.2, factore, x_label)
}
pairwiseTTest <- function(tabla, varsRemoved){
for (i in colnames(tabla)){
if (is.numeric(tabla[,i]) & !(i %in% varsRemoved)){
message(paste("Analized variable: ", i))
message(paste("Time comparisons ", i))
print(pairwise_t_test(data = tabla , formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni")
%>% dplyr::select(-df, -statistic))
tablaGr <- group_by(tabla, Sweetener, Sex)
message(paste("Time-Sweetener-Sex comparisons", i))
print(pairwise_t_test(data = tablaGr, formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni") %>% dplyr::select(-df, -statistic))
tablaGr <- group_by(tabla, Sweetener)
message(paste("Time-Sweetener comparisons", i))
print(pairwise_t_test(data = tablaGr , formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni") %>% dplyr::select(-df, -statistic))
tablaGr <- group_by(tabla, Sex)
message(paste("Time-Sex comparisons", i))
print(pairwise_t_test(data = tablaGr , formula = as.formula(paste(sym(i),"~ Time")),
paired = T, p.adjust.method = "bonferroni") %>% dplyr::select(-df, -statistic))
}
}
}
main1prepoc <- function(pathToTable, pathtoRealTable){
tabla1.1 <- readingFillingGrouping(pathToTable)
#tabla1.1 <- anthroSex(tabla1.0)
tabla1.2 <- normalizingNumeric(tabla1.1)
tabla1.3 <- factoringImputating(tabla1.2)
#tabla1.2_stats <- estadisticosDescriptivos(urAnt1.2)
tabla1.3 <- timingCleanFeatures(tabla1.2, pathtoRealTable)
return (tabla1.3)
}
tableAU_I <-  urineAntImp %>%
filter(Time == "Final") %>%
# select(getSelectedAttributes(borutaF)[-c(5,6)])
select(CA, Total.CA, DHPAA, TFA.G)
tableAU_F$Total.CA <- as.numeric(tableFn$Total.CA)
tableAU_I <-  urineAntImp %>%
filter(Time == "Initial") %>%
select( c("CA.G","CA.GS","DHPAA.SS","VA","Total.VA"))
tableAU_I <-  urineAntImp %>%
filter(Time == "Final") %>%
# select(getSelectedAttributes(borutaF)[-c(5,6)])
select(CA, Total.CA, DHPAA, TFA.G)
tableAU_F <-  urineAntImp %>%
filter(Time == "Final") %>%
# select(getSelectedAttributes(borutaF)[-c(5,6)])
select(CA, Total.CA, DHPAA, TFA.G)
tableAU_I <-  urineAntImp %>%
filter(Time == "Initial") %>%
select( c("CA.G","CA.GS","DHPAA.SS","VA","Total.VA"))
tableAU_I$CA.GS <- as.numeric(tableAU_I$CA.GS)
clustersAU_I <- cluster::pam(tableAU_I, k = 6, metric = "manhattan")
pcaAU_I <- prcomp(tableAU_I)
tableAU_F <-  urineAntImp %>%
filter(Time == "Final") %>%
# select(getSelectedAttributes(borutaF)[-c(5,6)])
select(CA, Total.CA, DHPAA, TFA.G)
tableAU_F$Total.CA <- as.numeric(tableAU_F$Total.CA)
clustersAU_F <-cluster::pam(x = tableFn, k = 6, metric = "manhattan")
clustersAU_F <-cluster::pam(x = tableAU_F, k = 6, metric = "manhattan")
pcaAU_Fn <- prcomp(tableFn)
tablaClustersIn <-  urineAntImp %>% filter(Time == "Initial") %>%
select(-c(grouping, numVol, Time)) %>%
add_column(clusters = clustersAU_I$clustering)
tableSexIn <- table(tablaClustersIn$Sex, tablaClustersIn$clusters)#tabla_clusters %>% count(Sexo, clusters)
tablaClustersIn <- tablaClustersIn %>% select(-c(Sweetener, Sex))
longtableIn <- melt(tablaClustersIn, id = c("clusters"))
longtableIn$value <- as.numeric(longtableIn$value)
tablaClustersFn <-  urineAntImp %>% filter(Time == "Final")%>%
select(-c(grouping, numVol, Time)) %>%
add_column(clusters = clustersFn$clustering)
tableSexFn <- table(tablaClustersFn$Sex, tablaClustersFn$clusters) #tabla_clusters %>% count(Sexo, clusters)
tableSweetenerFn <- table(tablaClustersFn$Sweetener, tablaClustersFn$clusters) #tabla_clusters %>% count(Endulzante, clusters)
tablaClustersFn <- tablaClustersFn %>% select(-c(Sweetener, Sex))
longtableFn <- melt(tablaClustersFn, id = c("clusters"))
longtableFn$value <- as.numeric(longtableFn$value)
boxplot.stats(longtableIn)
longtableIn
longtableIn
boxplot.stats(longtableIn$variable)
boxplot.stats(longtableIn$variable)
boxplot(longtableIn$variable)
boxplot(longtableIn$value)
boxplot(value~variable, data = longtableFn)
boxplot(value~variable*cluster, data = longtableFn)
boxplot(value~variable*clusters, data = longtableFn)
boxplot(value~variable*clusters, data = longtableFn)$stats
boxplot.stats(value~variable*clusters, data = longtableFn)
boxplot.stats(value~variable*clusters, data = longtableFn)
boxplot.stats(value~variable*clusters)
uwu <- boxplot(value~variable*clusters, data = longtableFn)$stats
boxplot.stats(uwu)
longtableIn
longtableIn %>% group_by(clusters)
longtableIn %>% group_by(clusters)  %>% summarize(min = min(x),
q1 = quantile(x, 0.25),
median = median(x),
mean = mean(x),
q3 = quantile(x, 0.75),
max = max(x))
longtableIn %>% group_by(clusters)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
longtableIn %>% group_by(clusters, variables)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
longtableIn %>% group_by(clusters, variable)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
write.csv <- longtableIn %>% group_by(clusters, variable)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
uwu <- longtableIn %>% group_by(clusters, variable)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
uwu
View(uwu)
write.csv(uwu, file = "results/clustersUrineComp.csv")
uwu <- longtableFn %>% group_by(clusters, variable)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
write.csv(uwu, "../results/clustersUrineCompAntFinal.csv")
tableIn <-  urineFlavImp %>%
filter(Time == "Initial")  %>%
# select(getSelectedAttributes(borutaI))
select(E, N.GG, Total.HE, Total.N)
clustersFU_I <- cluster::pam(tableIn[-63,], k = 6, metric = "manhattan")
pcaFU_I <- prcomp(tableIn[-63,])
tableFn <-  urineFlavImp %>%
filter(Time == "Final") %>%
# select(getSelectedAttributes(borutaF)[-c(6,7)])
select(HE, N.G, N.GG, Total.N, E)
clustersFU_F <- cluster::pam(tableFn, k = 6, metric = "manhattan")
pcaFU_F <- prcomp(tableFn)
tablaClustersIn <-  urineFlavImp %>% filter(Time =="Initial")%>%
select(-c(grouping, numVol, Time)) %>%
filter(!row_number() == 63)  %>%
add_column(clusters = clustersFU_I$clustering)
tableSexIn <- table(tablaClustersIn$Sex, tablaClustersIn$clusters)#tabla_clusters %>% count(Sexo, clusters)
tablaClustersIn <- tablaClustersIn %>% select(-c(Sweetener, Sex))
longtableIn <- melt(tablaClustersIn, id = c("clusters"))
tablaClustersFn <-  urineFlavImp %>% filter(Time == "Final")%>%
select(-c(grouping, numVol, Time)) %>%
add_column(clusters = clustersFU_F$clustering)
tableSweetenerFn <- table(tablaClustersFn$Sweetener, tablaClustersFn$clusters) #tabla_clusters %>% count(Endulzante, clusters)
tablaClustersFn <- tablaClustersFn %>% select(-c(Sweetener, Sex))
longtableFn <- melt(tablaClustersFn, id = c("clusters"))
uwu <- longtableFn %>% group_by(clusters, variable)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
write.csv(uwu, "../results/clustersUrineCompFlavFinal.csv")
uwu <- longtableIn %>% group_by(clusters, variable)  %>% summarize(min = min(value),
q1 = quantile(value, 0.25),
median = median(value),
mean = mean(value),
q3 = quantile(value, 0.75),
max = max(value))
write.csv(uwu, "../results/clustersUrineCompFlavInitial.csv")

#
}
for(i in colnames(tabla_mergeDupl)) {
anova_paired <- aov(formula = as.name(i) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)
}
for(i in colnames(tabla_mergeDupl)) {
if (i == "numVol"){
print("uwu")
}
else{
anova_paired <- aov(formula = as.name(i) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)
}
}
for(i in colnames(tabla_mergeDupl)) {
if (i == "numVol"){
print("uwu")
}
else{
print(i)
anova_paired <- aov(formula = as.name(i) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)
}
}
for(i in colnames(tabla_mergeDupl)) {
if (i == "numVol"){
print("uwu")
}
else{
print(as.name(i))
anova_paired <- aov(formula = as.name(i) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)
}
}
for(i in colnames(tabla_mergeDupl)) {
if (i == "numVol"){
print("uwu")
}
else{
print(as.formula(i))
anova_paired <- aov(formula = as.name(i) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)
}
}
for(i in colnames(tabla_mergeDupl)) {
if (i == "numVol"){
print("uwu")
}
else{
print(as.matrix(i))
anova_paired <- aov(formula = as.formula(i) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)
}
}
for(i in colnames(tabla_mergeDupl)) {
if (i == "numVol"){
print("uwu")
}
else{
print(as.matrix(i))
anova_paired <- aov(formula = as.matrix(i) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)
}
}
tabla_mergeDupl[,2:9]
anova_results <- purrr::map(tabla_mergeDupl[,2:9], ~aov(.x ~  Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo)))
anova_results <- purrr::map(tabla_mergeDupl[,1:9], ~aov(.x ~  Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo)))
tabla_mergeDupl[,1:9]
anova_results <- purrr::map(tabla_mergeDupl[,2:9], ~aov(.x ~  tabla_mergeDupl$Sexo * tabla_mergeDupl$Endulzante
* tabla_mergeDupl$Tiempo +
Error(tabla_mergeDupl$numVol/tabla_mergeDupl$Tiempo)))
anova_results[[1]]
anova_results[[1]]
aov_results <- lapply(tabla_mergeDupl, function(x) summary(aov(x ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)))
tabla_mergeDupl
library(tidyverse)
library(rstatix)
library(scales)
library(ggpubr)
library(factoextra)
library(GGally)
library(plotly)
library(FactoMineR)
library(cluster)
library(mclust)
library(reshape2)
library(gridExtra)
aov_results <- lapply(tabla_mergeDupl, function(x) summary(aov(x ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)))
str(tabla_mergeDupl)
aov_results <- lapply(tabla_mergeDupl, function(x) summary(aov(x ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)))
aov_results <- lapply(tabla_mergeDupl, function(x) summary(aov(as.numeric(x) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)))
aov_results[[1]]
aov_results[[2]]
lappy(aov_results, print)
lapply(aov_results, print)
aov_results <- lapply(tabla_mergeDupl, function(x) anova(aov(as.numeric(x) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl)))
aov_results <- lapply(tabla_mergeDupl, function(x) aov(as.numeric(x) ~ Sexo * Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_mergeDupl))
anova(aov_results[[1]])
aov_results[[1]]
anova(aov_results[[1]]$`numVol:Tiempo`)
pruebaUwu <- anova(aov_results[[1]]$`numVol:Tiempo`)
pruebaUwu$`Pr(>F)`
pruebaUwu
nrow(pruebaUwu)
for (i in nrow(pruebaUwu)){
if (pruebaUwu$`Pr(>F)`[i] < 0.05){print(pruebaUwu[i,])}
}
for (i in nrow(pruebaUwu)){
print(pruebaUwu$`Pr(>F)`[i])
if (pruebaUwu$`Pr(>F)`[i] < 0.05){print(pruebaUwu[i,])}
}
for (i in seq(1,nrow(pruebaUwu))){
print(pruebaUwu$`Pr(>F)`[i])
if (pruebaUwu$`Pr(>F)`[i] < 0.05){print(pruebaUwu[i,])}
}
pruebaUwu <- anova(aov_results[[2]]$`numVol:Tiempo`)
for (i in seq(1,nrow(pruebaUwu))){
print(pruebaUwu$`Pr(>F)`[i])
if (pruebaUwu$`Pr(>F)`[i] < 0.05){print(pruebaUwu[i,])}
}
for (i in seq(1,nrow(pruebaUwu))){
print(pruebaUwu$`Pr(>F)`[i])
if (pruebaUwu$`Pr(>F)`[i] < 0.05 == T){
print(pruebaUwu[i,])
}
}
for (i in seq(1,nrow(pruebaUwu))){
print(pruebaUwu$`Pr(>F)`[i])
if (pruebaUwu$`Pr(>F)`[i] < 0.05 == T){
print(pruebaUwu[i,])
}
}
for (i in seq(1,nrow(pruebaUwu))){
print(pruebaUwu$`Pr(>F)`[i])
if ((pruebaUwu$`Pr(>F)`[i] < 0.05) == T){
print(pruebaUwu[i,])
}
}
for (i in seq(1,nrow(pruebaUwu)-1)){
print(pruebaUwu$`Pr(>F)`[i])
if (pruebaUwu$`Pr(>F)`[i] < 0.05){
print(pruebaUwu[i,])
}
}
nrow(aov_results)
length(aov_results)
for (j in seq(1, length(aov_results))) {
print(aov_results[[j]])
}
for (j in seq(1, length(aov_results))) {
print(aov_results[[j]])
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
print(resultado$`Pr(>F)`[i])
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
install.packages("knitr")
library(knitr)
knit_print(for (j in seq(1, length(aov_results))) {
print(aov_results[[j]])
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
print(resultado$`Pr(>F)`[i])
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
knit_print.html(for (j in seq(1, length(aov_results))) {
print(aov_results[[j]])
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
print(resultado$`Pr(>F)`[i])
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
methods(knit_print)
knit_print(
for (j in seq(1, length(aov_results))) {
print(aov_results[[j]])
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
print(resultado$`Pr(>F)`[i])
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
knit_print(
for (j in seq(1, length(aov_results))) {
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
View(aov_results)
knit_print(
for (j in seq(1, length(aov_results))) {
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
print(names(aov_results)[j]))
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
knit_print(
for (j in seq(1, length(aov_results))) {
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
print(names(aov_results)[j])
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
names(aov_results)
names(aov_results)[1]
knit_print(
for (j in seq(1, length(aov_results))) {
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
print("nombre variable " + names(aov_results)[j])
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
knit_print(
for (j in seq(1, length(aov_results))) {
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
print("nombre variable ", names(aov_results)[j])
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
knit_print(
for (j in seq(1, length(aov_results))) {
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
print(c("nombre variable ", names(aov_results)[j]))
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
knit_print(
for (j in seq(1, length(aov_results))) {
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
#print(c("nombre variable ", names(aov_results)[j]))
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
knit_print(
for (j in seq(1, length(aov_results))) {
print(paste("Variable analizada: ", names(aov_results)[j]))
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
install.packages("stargazer")
library(stargazer)
stargazer(
for (j in seq(1, length(aov_results))) {
print(paste("Variable analizada: ", names(aov_results)[j]))
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
)
for (j in seq(1, length(aov_results))) {
print(paste("Variable analizada: ", names(aov_results)[j]))
resultado <- anova(aov_results[[j]]$`numVol:Tiempo`)
for (i in seq(1,nrow(resultado)-1)){
if (resultado$`Pr(>F)`[i] < 0.05){
print(resultado[i,])
}
}
}
stargazer(anova(aov_results[[1]]))
stargazer(anova(aov_results[[1]]$`numVol:Tiempo`))
stargazer(anova(aov_results[[1]]$`numVol:Tiempo`), out = ".html")
stargazer(anova(aov_results[[1]]$`numVol:Tiempo`), type = "html")
names(aov_results)
source("~/Estudio/1stStepsPhD/article1.R", encoding = 'UTF-8')
checkNorm <- function (listaTablas, var) {
datos <- listaTablas$tablaFactors# %>% dplyr::select (numVol, Sexo, Endulzante, Tiempo, EG)
Q <- quantile(datos[,var], probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(datos[,var])
datos <- subset(datos,
datos[,var] > (Q[1] - 0.75*iqr) &
datos[,var] < (Q[2] + 0.75*iqr))
#datos <- datos [-which(datos$ES > 0.2),]
print(
ggplot(data = datos, aes(x = datos[,var])) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(datos[,var]),
sd = sd(datos[,var]))) +
ggtitle("Histograma con curva normal te√≥rica") +
theme_bw()
)
print(
qqnorm(datos[,var], pch = 19, col = "gray50")
)
qqline(datos[,var])
print(shapiro.test(datos[,var]))
print(ks.test(datos[,var], "pnorm", mean(datos[,var]), sd(datos[,var])))
print(nortest::lillie.test(datos[,var]))
}
library(tidyverse)
library(rstatix)
library(scales)
library(ggpubr)
library(factoextra)
library(GGally)
library(plotly)
library(FactoMineR)
library(cluster)
library(mclust)
library(reshape2)
library(gridExtra)
checkNorm <- function (listaTablas, var) {
datos <- listaTablas$tablaFactors# %>% dplyr::select (numVol, Sexo, Endulzante, Tiempo, EG)
Q <- quantile(datos[,var], probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(datos[,var])
datos <- subset(datos,
datos[,var] > (Q[1] - 0.75*iqr) &
datos[,var] < (Q[2] + 0.75*iqr))
#datos <- datos [-which(datos$ES > 0.2),]
print(
ggplot(data = datos, aes(x = datos[,var])) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(datos[,var]),
sd = sd(datos[,var]))) +
ggtitle("Histograma con curva normal te√≥rica") +
theme_bw()
)
print(
qqnorm(datos[,var], pch = 19, col = "gray50")
)
qqline(datos[,var])
print(shapiro.test(datos[,var]))
print(ks.test(datos[,var], "pnorm", mean(datos[,var]), sd(datos[,var])))
print(nortest::lillie.test(datos[,var]))
}
checkNorm(orinaFlav, 'ES')
checkNorm <- function (listaTablas, var) {
datos <- listaTablas$tablaFactors# %>% dplyr::select (numVol, Sexo, Endulzante, Tiempo, EG)
Q <- quantile(datos[,var], probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(datos[,var])
datos <- subset(datos,
datos[,var] > (Q[1] - 0.5*iqr) &
datos[,var] < (Q[2] + 0.5*iqr))
#datos <- datos [-which(datos$ES > 0.2),]
print(
ggplot(data = datos, aes(x = datos[,var])) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(datos[,var]),
sd = sd(datos[,var]))) +
ggtitle("Histograma con curva normal te√≥rica") +
theme_bw()
)
print(
qqnorm(datos[,var], pch = 19, col = "gray50")
)
qqline(datos[,var])
print(shapiro.test(datos[,var]))
print(ks.test(datos[,var], "pnorm", mean(datos[,var]), sd(datos[,var])))
print(nortest::lillie.test(datos[,var]))
}
checkNorm(orinaFlav, 'ES')
source("~/Estudio/1stStepsPhD/article1.R", encoding = 'UTF-8')
tablaFactors <- orinaFlav$tablaFactors
counts <- data.frame(table(tablaFactors$numVol))
tabla_Dupl <- tablaFactors[tablaFactors$numVol %in% counts$Var1[counts$Freq > 1],]
aov_results <- lapply(tabla_Dupl, function(x) aov(as.numeric(x) ~ Sexo *
Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_Dupl))
source("~/Estudio/1stStepsPhD/article1.R", encoding = 'UTF-8')
for (j in seq(1, length(aov_results))) {
message(paste("Variable analizada: ", names(aov_results)[j]))
resultado <- summary(aov_results[[j]])$`Error: numVol:Tiempo`
for (i in seq(1,4)){
if (resultado[[1]][,5][i] < 0.1){
print(resultado[[1]][i,])
}
}
}
aov_todo <- function (listaTablas) {
tablaFactors <- listaTablas$tablaFactors
counts <- data.frame(table(tablaFactors$numVol))
tabla_Dupl <- tablaFactors[tablaFactors$numVol %in% counts$Var1[counts$Freq > 1],]
aov_results <- lapply(tabla_Dupl, function(x) aov(as.numeric(x) ~ Sexo *
Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_Dupl))
for (j in seq(1, length(aov_results))) {
message(paste("Variable analizada: ", names(aov_results)[j]))
resultado <- summary(aov_results[[j]])$`Error: numVol:Tiempo`
for (i in seq(1,4)){
if (resultado[[1]][,5][i] < 0.1){
print(resultado[[1]][i,])
}
}
}
}
orinaFlavNorm <- checkNorm(orinaFlav, 'ES')
checkNorm <- function (listaTablas, var) {
datos <- listaTablas$tablaFactors# %>% dplyr::select (numVol, Sexo, Endulzante, Tiempo, EG)
Q <- quantile(datos[,var], probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(datos[,var])
datos <- subset(datos,
datos[,var] > (Q[1] - 0.5*iqr) &
datos[,var] < (Q[2] + 0.5*iqr))
#datos <- datos [-which(datos$ES > 0.2),]
print(
ggplot(data = datos, aes(x = datos[,var])) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(datos[,var]),
sd = sd(datos[,var]))) +
ggtitle("Histograma con curva normal te√≥rica") +
theme_bw()
)
print(
qqnorm(datos[,var], pch = 19, col = "gray50")
)
qqline(datos[,var])
print(shapiro.test(datos[,var]))
print(ks.test(datos[,var], "pnorm", mean(datos[,var]), sd(datos[,var])))
print(nortest::lillie.test(datos[,var]))
return(datos)
}
orinaFlavNorm <- checkNorm(orinaFlav, 'ES')
orinaFlavNorm
aov_todo <- function (tablaFactors) {
counts <- data.frame(table(tablaFactors$numVol))
tabla_Dupl <- tablaFactors[tablaFactors$numVol %in% counts$Var1[counts$Freq > 1],]
aov_results <- lapply(tabla_Dupl, function(x) aov(as.numeric(x) ~ Sexo *
Endulzante * Tiempo +
Error(numVol/Tiempo),
data = tabla_Dupl))
for (j in seq(1, length(aov_results))) {
message(paste("Variable analizada: ", names(aov_results)[j]))
resultado <- summary(aov_results[[j]])$`Error: numVol:Tiempo`
for (i in seq(1,4)){
if (resultado[[1]][,5][i] < 0.1){
print(resultado[[1]][i,])
}
}
}
}
aov_todo (orinaFlavNorm)
source("~/Estudio/1stStepsPhD/article1.R", encoding = 'UTF-8')

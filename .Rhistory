}
else if (factore == "Sex") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore]))) +
geom_boxplot()+
ggtitle(paste("B. Sex:Time Anthocyanin-Urine"))+
labs(y = "standarized value", x = "variables", fill = "Sex")+
scale_fill_brewer(palette = "Reds")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
else{
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore])), colour = "Sweetener") +
geom_boxplot()+
ggtitle(paste("C. Sweetener:Time Flavanones-urine"))+
labs(y = "standarized value", x = "bioactive", fill = "Sweetener")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
}
bxp(tableMetMelt, "Sweetener")
bxp <- function(longTable, factore){
if (factore == "Time") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore],
levels = c("Initial", "Final")))) +
geom_boxplot()+
ggtitle(paste("A.Time Flavanones-Plasma"))+
labs(y = "standarized value", x = "variables", fill = "Time")
}
else if (factore == "Sex") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore]))) +
geom_boxplot()+
ggtitle(paste("B. Sex:Time Anthocyanin-Urine"))+
labs(y = "standarized value", x = "variables", fill = "Sex")+
scale_fill_brewer(palette = "Reds")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
else{
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore])), colour = "Sweetener") +
geom_boxplot()+
ggtitle(paste("B. Sweetener:Time Flavanones-urine"))+
labs(y = "standarized value", x = "bioactive", fill = "Sweetener")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
}
bxp(tableMetMelt, "Sweetener")
bxp <- function(longTable, factore){
if (factore == "Time") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore],
levels = c("Initial", "Final")))) +
geom_boxplot()+
ggtitle(paste("A.Time Flavanones-Plasma"))+
labs(y = "standarized value", x = "variables", fill = "Time")
}
else if (factore == "Sex") {
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore]))) +
geom_boxplot()+
ggtitle(paste("B. Sex:Time Anthocyanin-Urine"))+
labs(y = "standarized value", x = "variables", fill = "Sex")+
scale_fill_brewer(palette = "Reds")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
else{
ggplot(longTable, aes(factor(variable,
level = unique(longTable$variable)),as.numeric(value),
fill=factor(longTable[,factore])), colour = "Sweetener") +
geom_boxplot()+
ggtitle(paste("B. Sweetener:Time Flavanones-urine"))+
labs(y = "standarized value", x = "variables", fill = "Sweetener")+
facet_wrap(~factor(Time, levels = c("Initial", "Final")))
}
}
bxp(tableMetMelt, "Sweetener")
tabla_clustersAnt_T0 <-  plasmaAnt %>% filter(Time == "Initial") %>%
select(-c(anthro, numVol, Time)) %>%
select(CA, VA.GG, DHPAA, DHPAA.G, Sweetener, Sex) %>%
add_column(clusters = modelClusteringAnt_T0$classification)
source("scripts/preprocess.R")
library(mclust)
library(factoextra)
library(ggpubr)
library(reshape2)
library(gridExtra)
library(clValid)
# lectura
orinaFlav <- read.csv("data/mainUrineFlav.csv")[-1]
orinaAnt <- read.csv("data/mainUrineAnt.csv")[-1]
plasmaAnt <- read.csv("data/mainPlasmaAnt.csv")[-1]
plasmaFlav <- read.csv("data/mainPlasmaFlav.csv")[-1]
#
anthro <- c("Peso", "IMC", "Grasa", "IRCV",
"Bpmin", "Bpmax", "Frec")
flavplot <- orinaFlav %>% select(-c(anthro, Sweetener, Sex, numVol, Time)) %>% select(HE.G, NS, NG)
model_clustering_OF <- Mclust(flavplot)
p1 <- fviz_mclust(object = model_clustering_OF, what = "BIC", pallete = "jco",
title = "Model Selection Orina Flav") + scale_x_discrete(limits = c(1:10))
p2 <- fviz_mclust(model_clustering_OF, what = "classification", geom = "point",
title = "Clusters Plot Orina Flav", pallete = "jco")
ggarrange(p1,p2)
flavplot_T0 <- orinaFlav %>% filter(Time == "Initial") %>%
select(-c(anthro, Sweetener, Sex, numVol, Time)) %>% select(HE.G, NS, NG)
flavplot_TF <- orinaFlav %>% filter(Time == "Final") %>%
select(-c(anthro, Sweetener, Sex, numVol, Time)) %>% select(HE.G, NS, NG)
modelClusteringFlav_T0 <- Mclust(flavplot_T0)
p1 <- fviz_mclust(object = modelClusteringFlav_T0, what = "BIC", pallete = "jco",
title = "Model Selection Orina Flav Initial Time") + scale_x_discrete(limits = c(1:10))
p2_0 <- fviz_mclust(modelClusteringFlav_T0, what = "classification", geom = "point",
title = "A. Flavanones Initial Time", pallete = "jco")
ggarrange(p1,p2)
modelClusteringFlav_TF <- Mclust(flavplot_TF, G = 4)
p1 <- fviz_mclust(object = modelClusteringFlav_TF, what = "BIC", pallete = "jco",
title = "Model Selection Orina Flav Final Time") + scale_x_discrete(limits = c(1:10))
p2_F <- fviz_mclust(modelClusteringFlav_TF, what = "classification", geom = "point",
title = "B. Flav Final Time", pallete = "jco")
ggarrange(p2_0,p2_F)
comparacionPA_T0 <- clValid(
obj        = plasmaAnt %>% filter(Time == "Initial") %>% select(-c(anthro, Sweetener, Sex, numVol, Time)) %>%
select(CA, VA.GG, DHPAA, DHPAA.G)
,
nClust     = 2:6,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
summary(comparacionPA_T0)
comparacionPA_TF <- clValid(
obj        = plasmaAnt %>% filter(Time == "Final") %>% select(-c(anthro, Sweetener, Sex, numVol, Time)) %>%
select(CA, VA.GG, DHPAA, DHPAA.G)
,
nClust     = 2:6,
clMethods  = c( "hierarchical", "kmeans", "diana", "fanny", "som", "model", "sota", "pam", "clara","agnes"),
validation = c("stability", "internal")
)
summary(comparacionPA_TF)
antplot <- plasmaAnt %>% select(-c(anthro, Sweetener, Sex, numVol, Time)) %>% select(CA, VA.GG, DHPAA, DHPAA.G)
modelClustering <- Mclust(antplot)
p1 <- fviz_mclust(object = modelClustering, what = "BIC", pallete = "jco",
title = "Model Selection Plasma Ant ") + scale_x_discrete(limits = c(1:10))
p2 <- fviz_mclust(modelClustering, what = "classification", geom = "point",
title = "Clusters Plot Plasma Ant ", pallete = "jco")
ggarrange(p1,p2)
antplot_T0 <- plasmaAnt %>% filter(Time == "Initial") %>%
select(-c(anthro, Sweetener, Sex, numVol, Time)) %>% select(CA, VA.GG, DHPAA, DHPAA.G)
antplot_TF <- plasmaAnt %>% filter(Time == "Final") %>%
select(-c(anthro, Sweetener, Sex, numVol, Time)) %>% select(CA, VA.GG, DHPAA, DHPAA.G)
modelClusteringAnt_T0 <- Mclust(antplot_T0, G = 5)
p1 <- fviz_mclust(object = modelClusteringAnt_T0, what = "BIC", pallete = "jco",
title = "Model Selection Plasma Ant Initial Time") + scale_x_discrete(limits = c(1:10))
p2_0 <- fviz_mclust(modelClusteringAnt_T0, what = "classification", geom = "point",
title = "C.Anthocyanins Initial Time", pallete = "jco")
plot(p1)
ggarrange(p1,p2)
modelClusteringAnt_TF <- Mclust(antplot_TF, G = 4)
p1 <- fviz_mclust(object = modelClusteringAnt_TF, what = "BIC", pallete = "jco",
title = "Model Selection Plasma Ant Final Time") + scale_x_discrete(limits = c(1:10))
p2_F <- fviz_mclust(modelClusteringAnt_TF, what = "classification", geom = "point",
title = "D. Anthocyanins Final Time", pallete = "jco")
ggarrange(p2_0,p2_F)
modelClusteringAnt_T0$classification
modelClusteringAnt_TF$classification
modelClusteringFlav_T0$classification
modelClusteringFlav_TF$classification
tabla_clustersAnt_T0 <-  plasmaAnt %>% filter(Time == "Initial") %>%
select(-c(anthro, numVol, Time)) %>%
select(CA, VA.GG, DHPAA, DHPAA.G, Sweetener, Sex) %>%
add_column(clusters = modelClusteringAnt_T0$classification)
tableSexo_T0 <- table(tabla_clustersAnt_T0$Sex, tabla_clustersAnt_T0$clusters)#tabla_clusters %>% count(Sexo, clusters)
tabla_clustersAnt_T0 <- tabla_clustersAnt_T0 %>% select(-c(Sweetener, Sex))
longtableAnt_T0 <- melt(tabla_clustersAnt_T0, id = c("clusters"))
p1 <- ggplot(longtableAnt_T0, aes(factor(variable, level = unique(longtableAnt_T0$variable)),as.numeric(value),
fill=factor(clusters))) +
geom_boxplot()+
annotation_custom(grob = tableGrob(tableSexo_T0, rows = c("M", "W"), theme = ttheme_default(base_size = 8)),
xmin= 4,xmax=5.5, ymin=0.75, ymax=1.25)+
ggtitle("C. Anthocyanins at Initial Time")+
labs(y = "standarized value",x = "Bioactive Anthocyanins", fill = "Cluster")
tabla_clustersAnt_TF <-  plasmaAnt %>% filter(Time == "Final") %>%
select(-c(anthro, numVol, Time)) %>%
select(CA, VA.GG, DHPAA, DHPAA.G, Sweetener, Sex) %>%
add_column(clusters = modelClusteringAnt_TF$classification)
tableSexo_TF <- table(tabla_clustersAnt_TF$Sex, tabla_clustersAnt_TF$clusters)#tabla_clusters %>% count(Sexo, clusters)
tableEdulcorante_TF <- table(tabla_clustersAnt_TF$Sweetener, tabla_clustersAnt_TF$clusters) #tabla_clusters %>% count(Endulzante, clusters)
tabla_clustersAnt_TF <- tabla_clustersAnt_TF %>% select(-c(Sweetener, Sex))
longtableAnt_TF <- melt(tabla_clustersAnt_TF, id = c("clusters"))
p2 <- ggplot(longtableAnt_TF, aes(factor(variable, level = unique(longtableAnt_TF$variable)),as.numeric(value),
fill=factor(clusters))) +
geom_boxplot()+
annotation_custom(grob = tableGrob(tableSexo_TF, rows = c("M", "W"), theme = ttheme_default(base_size = 8)),
xmin= 4,xmax=5.5, ymin=0.75, ymax=1.25)+
annotation_custom(grob = tableGrob(tableEdulcorante_TF, rows=c("SA", "ST","SU"), theme = ttheme_default(base_size = 8)),
xmin= 4,xmax=5.5, ymin=-0.25, ymax=0.25)+
ggtitle("D. Anthocyanins at Final Time")+
labs(y = "standarized value",  x = "Bioactive Anthocyanins", fill = "Cluster")
ggarrange(p1,p2)
p1 <- ggplot(longtableAnt_T0, aes(factor(variable, level = unique(longtableAnt_T0$variable)),as.numeric(value),
fill=factor(clusters))) +
geom_boxplot()+
annotation_custom(grob = tableGrob(tableSexo_T0, rows = c("M", "W"), theme = ttheme_default(base_size = 8)),
xmin= 4,xmax=5.5, ymin=0.75, ymax=1.25)+
ggtitle("A. Anthocyanins at Initial Time")+
labs(y = "standarized value",x = "variables", fill = "Cluster")
p2 <- ggplot(longtableAnt_TF, aes(factor(variable, level = unique(longtableAnt_TF$variable)),as.numeric(value),
fill=factor(clusters))) +
geom_boxplot()+
annotation_custom(grob = tableGrob(tableSexo_TF, rows = c("M", "W"), theme = ttheme_default(base_size = 8)),
xmin= 4,xmax=5.5, ymin=0.75, ymax=1.25)+
annotation_custom(grob = tableGrob(tableEdulcorante_TF, rows=c("SA", "ST","SU"), theme = ttheme_default(base_size = 8)),
xmin= 4,xmax=5.5, ymin=-0.25, ymax=0.25)+
ggtitle("B. Anthocyanins at Final Time")+
labs(y = "standarized value",  x = "variables", fill = "Cluster")
ggarrange(p1,p2)
tabla_clustersFlav_T0 <-  orinaFlav %>% filter(Time == "Initial") %>%
select(-c(anthro, numVol, Time)) %>%
select(HE.G, NG, NS, Sweetener, Sex) %>%
add_column(clusters = modelClusteringFlav_T0$classification)
tableSexo_T0 <- table(tabla_clustersFlav_T0$Sex, tabla_clustersFlav_T0$clusters)#tabla_clusters %>% count(Sexo, clusters)
tabla_clustersFlav_T0 <- tabla_clustersFlav_T0 %>% select(-c(Sweetener, Sex))
longtableFlav_T0 <- melt(tabla_clustersFlav_T0, id = c("clusters"))
p1 <- ggplot(longtableFlav_T0, aes(factor(variable, level = unique(longtableFlav_T0$variable)),as.numeric(value),
fill=factor(clusters))) +
geom_boxplot()+
annotation_custom(grob = tableGrob(tableSexo_T0, rows = c("M", "W"), theme = ttheme_default(base_size = 8)),
xmin= 4-1,xmax=5.5-1, ymin=0.75, ymax=1.25)+
ggtitle("A. Flavanones at Initial Time")+
labs(y = "standarized value", x = "Bioactive Flavanones", fill = "Cluster")
p1 <- ggplot(longtableFlav_T0, aes(factor(variable, level = unique(longtableFlav_T0$variable)),as.numeric(value),
fill=factor(clusters))) +
geom_boxplot()+
annotation_custom(grob = tableGrob(tableSexo_T0, rows = c("M", "W"), theme = ttheme_default(base_size = 8)),
xmin= 4-1,xmax=5.5-1, ymin=0.75, ymax=1.25)+
ggtitle("A. Flavanones at Initial Time")+
labs(y = "standarized value", x = "variables", fill = "Cluster")
tabla_clustersFlav_TF <- orinaFlav %>% filter(Time == "Final") %>%
select(-c(anthro, numVol, Time)) %>%
select(HE.G, NG, NS, Sweetener, Sex) %>%
add_column(clusters = modelClusteringFlav_TF$classification)
tableSexo_TF <- table(tabla_clustersFlav_TF$Sex, tabla_clustersFlav_TF$clusters)#tabla_clusters %>% count(Sexo, clusters)
tableEdulcorFlave_TF <- table(tabla_clustersFlav_TF$Sweetener, tabla_clustersFlav_TF$clusters) #tabla_clusters %>% count(EndulzFlave, clusters)
tabla_clustersFlav_TF <- tabla_clustersFlav_TF %>% select(-c(Sweetener, Sex))
longtableFlav_TF <- melt(tabla_clustersFlav_TF, id = c("clusters"))
p2 <- ggplot(longtableFlav_TF, aes(factor(variable, level = unique(longtableFlav_TF$variable)),as.numeric(value),
fill=factor(clusters))) +
geom_boxplot()+
annotation_custom(grob = tableGrob(tableSexo_TF, rows = c("M", "W"), theme = ttheme_default(base_size = 8)),
xmin= 3,xmax=4.5, ymin=0.75, ymax=1.25)+
annotation_custom(grob = tableGrob(tableEdulcorFlave_TF, rows=c("SA", "ST","SU"), theme = ttheme_default(base_size = 8)),
xmin= 3,xmax=4.5, ymin=-0.25, ymax=0.25)+
ggtitle("B. Flavanones at Final Time")+
labs(y = "standarized value", x = "variables", fill = "Cluster")
ggarrange(p1,p2)
p2_0 <- fviz_mclust(modelClusteringAnt_T0, what = "classification", geom = "point",
title = "A.Anthocyanins Initial Time", pallete = "jco")
p2_F <- fviz_mclust(modelClusteringAnt_TF, what = "classification", geom = "point",
title = "B. Anthocyanins Final Time", pallete = "jco")
ggarrange(p2_0,p2_F)
source("scripts/preprocess.R")
library(mclust)
library(factoextra)
library(ggpubr)
library(reshape2)
library(gridExtra)
library(clValid)
p2_0 <- fviz_mclust(modelClusteringFlav_T0, what = "classification", geom = "point",
title = "A. Flavanones Initial Time", pallete = "jco")
p2_F <- fviz_mclust(modelClusteringFlav_TF, what = "classification", geom = "point",
title = "B. Flav Final Time", pallete = "jco")
ggarrange(p2_0,p2_F)
p2_F <- fviz_mclust(modelClusteringFlav_TF, what = "classification", geom = "point",
title = "B. Flavanones Final Time", pallete = "jco")
ggarrange(p2_0,p2_F)
tabla1 <- reading("data/mainPlasmaAnt.csv", nasPercentageCol = 0.3, nasRow = T)
tabla1 <- read.csv("data/mainPlasmaAnt.csv")
source("scripts/preprocess.R")
tabla1 <- read.csv("data/mainPlasmaAnt.csv")
head(tabla1)
tabla1_sinout <- removeOutliers(tabla1)
tabla1_sinout <- removeOutliers(tabla1)
tabla1_sinout <- removeOutliers(tabla1_sinout)
tabla1_sinout <- removeOutliers(tabla1_sinout)
tabla1 <- read.csv("data/mainPlasmaAnt.csv")
head(tabla1)
tabla1_sinout <- removeOutliers(tabla1)
tabla2 <- read.csv("data/limpiosOutliers/plasmaAntNoOutliers.csv")
library(tidyverse)
library(tidyverse)
library(rstatix)
library(scales)
preprocessTablas1 <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$numVol <- factor(tabla$numVol)
for (i in seq(1:nrow(tabla))){
if (tabla$Tiempo[i] == "0"){
tabla$Peso[i] = tabla$Peso.inicial[i]
tabla$IMC[i] = tabla$IMC.Inicial[i]
tabla$Grasa[i] = tabla$Grasa.inicial[i]
tabla$IRCV[i] = tabla$IRCV.inicial[i]
tabla$Bpmin[i] = tabla$Bpmin.inicial[i]
tabla$Bpmax[i] = tabla$Bpmax.inicial[i]
tabla$Frec[i] = tabla$Frec.inicial[i]
}
else if (tabla$Tiempo[i] == "Final"){
tabla$Peso[i] = tabla$Peso.final[i]
tabla$IMC[i] = tabla$IMC.Final[i]
tabla$Grasa[i] = tabla$Grasa.final[i]
tabla$IRCV[i] = tabla$IRCV.Final[i]
tabla$Bpmin[i] = tabla$Bpmin.final[i]
tabla$Bpmax[i] = tabla$Bpmax.final[i]
tabla$Frec[i] = tabla$Frec.final[i]
}
}
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, X, Peso.inicial, Peso.final, Delta.Peso, Talla, IMC.Inicial, IMC.Final,
Delta.IMC, Grasa.inicial, Grasa.final, Delta.Grasa, IRCV.Final, IRCV.inicial,
Bpmin.final, Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo, numVol))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
set.A_factors <- cbind(set.A_rescaled, Endulzante = set.A$Endulzante,
Tiempo = set.A$Tiempo, Sexo = set.A$Sexo, numVol = set.A$numVol)
return(tablaFactors = set.A_factors)
}
orinaFlav <- preprocessTablas1("../data/", "tablaOrinaFlav.csv")
orinaAnt <- preprocessTablas1("../data/", "tablaorinaAnt.csv")
plasmaAnt <- preprocessTablas1("../data/", "tablaplasmaAnt.csv")
plasmaFlav <- preprocessTablas1("../data/", "tablaplasmaFlav_adjusted.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstatix)
library(scales)
orinaFlav <- read.csv("../data/limpiosOutliers/orinaFlavNoOutliers.csv")
orinaAnt <- read.csv("../data/limpiosOutliers/orinaAntNoOutliers.csv")
plasmaAnt <- read.csv("../data/limpiosOutliers/plasmaFlavNoOutliers.csv")
plasmaFlav <- read.csv("../data/limpiosOutliers/plasmaFlavNoOutliers.csv")
aov_test <- function(tabla, variable){
tablaVar <- tabla %>% select(numVol, Endulzante, Sexo, Tiempo, variable)
tablaVar <- tablaVar[!tablaVar[,variable] %in% boxplot.stats(tablaVar[,variable])$out,]
res.aov <- anova_test(data = tablaVar, dv=variable, wid=numVol,
between = c(Sexo, Endulzante), within= Tiempo)
tablaAnova <- get_anova_table(res.aov, correction = "auto")
print(tablaAnova)
}
aov_loop <- function(tabla){
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in seq(1,ncol(tabla))){
if (is.numeric(tabla[,i])){
message(paste("Variable analizada: ", names(tabla)[i]))
aov_test(tabla,
names(tabla)[i])
}
}
}
tabla1 <- read.csv(("../data/mainUrineAnt.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstatix)
library(scales)
orinaFlav <- read.csv("../data/limpiosOutliers/orinaFlavNoOutliers.csv")[-1]
orinaFlav <- read.csv("../data/limpiosOutliers/orinaFlavNoOutliers.csv")[-1]
orinaAnt <- read.csv("../data/limpiosOutliers/orinaAntNoOutliers.csv")[-1]
plasmaAnt <- read.csv("../data/limpiosOutliers/plasmaFlavNoOutliers.csv")[-1]
plasmaFlav <- read.csv("../data/limpiosOutliers/plasmaFlavNoOutliers.csv")[-1]
View(plasmaFlav)
aov_test <- function(tabla, variable){
browser()
tablaVar <- tabla %>% select(numVol, Endulzante, Sexo, Tiempo, variable)
res.aov <- anova_test(data = tablaVar, dv=variable, wid=numVol,
between = c(Sexo, Endulzante), within= Tiempo)
tablaAnova <- get_anova_table(res.aov, correction = "auto")
print(tablaAnova)
}
aov_loop <- function(tabla){
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in seq(1,ncol(tabla))){
if (is.numeric(tabla[,i])){
message(paste("Variable analizada: ", names(tabla)[i]))
aov_test(tabla,
names(tabla)[i])
}
}
}
aov_loop(orinaFlav)
aov_test <- function(tabla, variable){
tablaVar <- tabla %>% select(numVol, Endulzante, Sexo, Tiempo, variable)
res.aov <- anova_test(data = tablaVar, dv=variable, wid=numVol,
between = c(Sexo, Endulzante), within= Tiempo)
tablaAnova <- get_anova_table(res.aov, correction = "auto")
print(tablaAnova)
}
aov_loop <- function(tabla){
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in seq(1,ncol(tabla))){
if (is.numeric(tabla[,i])){
message(paste("Variable analizada: ", names(tabla)[i]))
aov_test(tabla,
names(tabla)[i])
}
}
}
aov_loop(orinaFlav)
aov_loop <- function(tabla){
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in seq(1,ncol(tabla))){
if (is.numeric(tabla[,i] && tabla[,i] != "numVol")){
message(paste("Variable analizada: ", names(tabla)[i]))
aov_test(tabla,
names(tabla)[i])
}
}
}
aov_loop(orinaFlav)
aov_loop <- function(tabla){
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in seq(1,ncol(tabla))){
if (is.numeric(tabla[,i] & names(tabla)[,i] != "numVol")){
message(paste("Variable analizada: ", names(tabla)[i]))
aov_test(tabla,
names(tabla)[i])
}
}
}
aov_loop(orinaFlav)
aov_loop <- function(tabla){
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in seq(1,ncol(tabla))){
if (is.numeric(tabla[,i] & names(tabla)[i] != "numVol")){
message(paste("Variable analizada: ", names(tabla)[i]))
aov_test(tabla,
names(tabla)[i])
}
}
}
aov_loop(orinaFlav)
names(orinaFlav)
colnames(orinaFlav)
colnames(orinaFlav)[1]
names(orinaFlav)[1]
aov_loop <- function(tabla){
message(paste("Tabla analizada: ", deparse(substitute(tabla))))
for (i in seq(1,ncol(tabla))){
if (is.numeric(tabla[,i]) & names(tabla)[i] != "numVol"){
message(paste("Variable analizada: ", names(tabla)[i]))
aov_test(tabla,
names(tabla)[i])
}
}
}
aov_loop(orinaFlav)
library(tidyverse)
library(rstatix)
library(scales)
preprocessTablas1 <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$numVol <- factor(tabla$numVol)
for (i in seq(1:nrow(tabla))){
if (tabla$Tiempo[i] == "0"){
tabla$Peso[i] = tabla$Peso.inicial[i]
tabla$IMC[i] = tabla$IMC.Inicial[i]
tabla$Grasa[i] = tabla$Grasa.inicial[i]
tabla$IRCV[i] = tabla$IRCV.inicial[i]
tabla$Bpmin[i] = tabla$Bpmin.inicial[i]
tabla$Bpmax[i] = tabla$Bpmax.inicial[i]
tabla$Frec[i] = tabla$Frec.inicial[i]
}
else if (tabla$Tiempo[i] == "Final"){
tabla$Peso[i] = tabla$Peso.final[i]
tabla$IMC[i] = tabla$IMC.Final[i]
tabla$Grasa[i] = tabla$Grasa.final[i]
tabla$IRCV[i] = tabla$IRCV.Final[i]
tabla$Bpmin[i] = tabla$Bpmin.final[i]
tabla$Bpmax[i] = tabla$Bpmax.final[i]
tabla$Frec[i] = tabla$Frec.final[i]
}
}
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, X, Peso.inicial, Peso.final, Delta.Peso, Talla, IMC.Inicial, IMC.Final,
Delta.IMC, Grasa.inicial, Grasa.final, Delta.Grasa, IRCV.Final, IRCV.inicial,
Bpmin.final, Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo, numVol))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
set.A_factors <- cbind(set.A_rescaled, Endulzante = set.A$Endulzante,
Tiempo = set.A$Tiempo, Sexo = set.A$Sexo, numVol = set.A$numVol)
return(tablaFactors = set.A_factors)
}
```{r lectura tablas, include=FALSE}
orinaFlav <- preprocessTablas1("../data/", "tablaOrinaFlav.csv")

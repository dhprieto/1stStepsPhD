}
fenSU <- read.csv("data/Compuestos fenolicos SU VidaUtil Cronico_1.csv", sep = ";", dec = ",")
fenSA <- read.csv("data/Compuestos fenolicos SA VidaUtil Cronico_1.csv", sep = ";", dec = ",")
fenST <- read.csv("data/Compuestos fenolicos ST VidaUtil Cronico_1.csv", sep = ";", dec = ",")
fenSU_total <- procesado2(fenSU, "SU")
fenSA_total <- procesado2(fenSA, "SA")
fenST_total <- procesado2(fenST, "ST")
fenFlavTotal <- rbind(fenSU_total, fenSA_total, fenST_total)
fenFlavTotal$Iluminacion <- rep(x = "Luz", nrow(fenFlavTotal))
fenFlavTotal$Dia<- rep(x = "0", nrow(fenFlavTotal))
fenFlavTotal$Temperatura <- rep(x = "25º", nrow(fenFlavTotal))
for (i in seq(1,nrow(fenFlavTotal))){
if (grepl(pattern = "\\s5º", x = fenFlavTotal$Condiciones[i])){
fenFlavTotal$Temperatura[i] <- "5º"
}
else if (grepl(pattern = "Osc", x = fenFlavTotal$Condiciones[i])){
fenFlavTotal$Iluminacion[i] <- "Osc"
}
}
for (i in seq(1,nrow(fenFlavTotal))){
if (grepl(pattern = "dia 15", x = fenFlavTotal$Condiciones[i])){
fenFlavTotal$Dia[i] <- "15"
}
else if (grepl(pattern = "dia 30", x = fenFlavTotal$Condiciones[i])){
fenFlavTotal$Dia[i] <- "30"
}
else if (grepl(pattern = "dia 45", x = fenFlavTotal$Condiciones[i])){
fenFlavTotal$Dia[i] <- "45"
}
else if (grepl(pattern = "dia 60", x = fenFlavTotal$Condiciones[i])){
fenFlavTotal$Dia[i] <- "60"
}
else if (grepl(pattern = "dia 90", x = fenFlavTotal$Condiciones[i])){
fenFlavTotal$Dia[i] <- "90"
}
}
write.csv(fenFlavTotal, file= "data/fenFlavTotal.csv")
View(fenFlavTotal)
shapiro.test(fenFlavTotal$values)
anova <- aov(values ~ Luz * dia, data = fenFlavTotal)
anova <- aov(values ~ Iluminacion * Dia, data = fenFlavTotal)
summary(anova)
par(mfrow=c(1,2))
plot(anova, which=1:4)
tabla_num <- tabla[-1]
# Se obtienen las medias de cada medida
tabla_mean <- do.call(rbind,
lapply(seq(1, nrow(tabla_num), 2), function(i){
x <- tabla_num[ i:(i + 1), , drop = FALSE]
res <- rbind(colSums(x)/2)
res
}))
rownames(tabla_mean) <- unique(tabla$Condiciones)
# La desviación estándar
tabla_sd <- do.call(rbind,
lapply(seq(1, nrow(tabla_num), 2), function(i){
x <- tabla_num[ i:(i + 1), , drop = FALSE]
res <- rbind(apply(x, 2, sd))
res
}))
# Apilamos datos
tabla_1 <- stack(as.data.frame(tabla_mean))
tabla_1$Condiciones <- rep(unique(tabla$Condiciones),4)
tabla_2 <- stack(as.data.frame(tabla_sd))
tabla_2$Condiciones <- rep(unique(tabla$Condiciones),4)
tabla_total <- merge(tabla_1, tabla_2, by = c("Condiciones", "ind"))
tabla_total$Endulzante <- rep(endulzante, nrow(tabla_total))
dplyr::rename(tabla_total, mean = values.x , SD = values.y, Compuesto = ind)
}
ggplot(data = fenFlavTotal, aes(x = Dia, y = values, colour = Endulzante,
group = Endulzante)) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun = mean, geom = "line") +
labs(y  =  'mean (mg/100mlzumo)') +
theme_bw()
library(ggplot2)
ggplot(data = fenFlavTotal, aes(x = Dia, y = values, colour = Endulzante,
group = Endulzante)) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun = mean, geom = "line") +
labs(y  =  'mean (mg/100mlzumo)') +
theme_bw()
ggplot(data = fenFlavTotal, aes(x = Luz, y = values, colour = Endulzante,
group = Endulzante)) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun = mean, geom = "line") +
labs(y  =  'mean (mg/100mlzumo)') +
theme_bw()
ggplot(data = fenFlavTotal, aes(x = Iluminacion, y = values, colour = Endulzante,
group = Endulzante)) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun = mean, geom = "line") +
labs(y  =  'mean (mg/100mlzumo)') +
theme_bw()
ggplot(data = fenFlavTotal, aes(x = Temperatura, y = values, colour = Endulzante,
group = Endulzante)) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun = mean, geom = "line") +
labs(y  =  'mean (mg/100mlzumo)') +
theme_bw()
anova <- aov(values ~ Iluminacion * Dia, data = fenFlavTotal)
summary(anova)
lsr::etaSquared(anova)
anova <- aov(values ~ Temperatura * Dia, data = fenFlavTotal)
summary(anova)
anova <- aov(values ~ Dia, data = fenFlavTotal)
summary(anova)
anova <- aov(values ~ Dia * Temperatur, data = fenFlavTotal)
anova <- aov(values ~ Dia * Temperatura, data = fenFlavTotal)
summary(anova)
anova <- aov(values ~ Endulzante, data = fenFlavTotal)
summary(anova)
View(fenFlavTotal)
kruskal.test(values ~ Endulzante, data = fenFlavTotal)
ggplot(data = fenFlavTotal, mapping = aes(x = Endulzante, y = values,
colour = Endulzante)) +
geom_boxplot() +
theme_bw() +
theme(legend.position = "none")
ggplot(data = fenFlavTotal, mapping = aes(x = Endulzante, colour = values)) +
geom_histogram() +
theme_bw() +
facet_grid(. ~ condicion) +
theme(legend.position = "none")
ggplot(data = fenFlavTotal, mapping = aes(x = Endulzante, colour = values)) +
geom_histogram() +
theme_bw() +
facet_grid(. ~ values) +
theme(legend.position = "none")
ggplot(data = fenFlavTotal, mapping = aes(x = values, colour = Endulzante)) +
geom_histogram() +
theme_bw() +
facet_grid(. ~ Endulzante) +
theme(legend.position = "none")
library(car)
install.packages("car")
car::leveneTest (values ~ Endulzante, data = fenFlavTotal, center = "median")
fenFlavTotal$Endulzante
factor(fenFlavTotal$Endulzante)
fenFlavTotal$Endulzante<-factor(fenFlavTotal$Endulzante)
car::leveneTest (values ~ Endulzante, data = fenFlavTotal, center = "median")
kruskal.test(values ~ Endulzante, data = fenFlavTotal)
fenFlavTotal$Endulzante<-factor(fenFlavTotal$Endulzante)
fenFlavTotal$Iluminacion<-factor(fenFlavTotal$Iluminacion)
fenFlavTotal$Dia<-factor(fenFlavTotal$Dia)
fenFlavTotal$Temperatura<-factor(fenFlavTotal$Temperatura)
car::leveneTest (values ~ Iluminacion, data = fenFlavTotal, center = "median")
car::leveneTest (values ~ Dia, data = fenFlavTotal, center = "median")
car::leveneTest (values ~ Temperatura, data = fenFlavTotal, center = "median")
anova <- aov(values ~ Endulzante*Dia, data = fenFlavTotal)
summary(anova)
par(mfrow=c(1,2))
plot(anova, which=1:4)
lsr::etaSquared(anova)
anova <- aov(values ~ Endulzante+Dia, data = fenFlavTotal)
summary(anova)
anova <- aov(values ~ Endulzante*Dia*Temperatura*Iluminacion, data = fenFlavTotal)
summary(anova)
library(factoextra)
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
View(orinaFlav)
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
View(orinaFlav)
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
View(orinaFlav)
fviz_nbclust(x = orinaFlav, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(orinaFlav, method = "euclidean"), nstart = 50)
get_dist(orinaFlav, method = "euclidean")
get_dist(orinaFlav$Eriodictiol..E., method = "euclidean")
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
tabla <- stack(as.data.frame(orinaFlav))
View(tabla)
rownames(orinaFlav) <- orinaFlav[,1]
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
rownames(orinaFlav) <- orinaFlav[,1]
tabla <- stack(as.data.frame(orinaFlav[,-1]))
View(tabla)
tabla$Condiciones <- rep(orinaFlav$X, 8)
View(tabla)
i in seq(1, rownumber(orinaFlav))
seq(1, rownumber(orinaFlav))
tabla$Endulzante <- rep("SA", nrow(tabla))
tabla$Tiempo <- rep("0", nrow(tabla))
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = tabla$Condiciones){
}
tabla$Endulzante <- "SU"
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = tabla$Condiciones)){
tabla$Endulzante <- "ST"
}
else if (grepl(pattern = "B", x = tabla$Condiciones)){
tabla$Endulzante <- "SU"
}
}
for (i in seq(1, nrow(orinaFlav))){
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = tabla$Condiciones)){
tabla$Tiempo <- "Final"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = tabla$Condiciones)){
tabla$Tiempo <- "Final"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = tabla$Condiciones)){
tabla$Tiempo <- "Final"
}
}
warnings()
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = tabla$Condiciones[i])){
tabla$Endulzante <- "ST"
}
else if (grepl(pattern = "B", x = tabla$Condiciones[i])){
tabla$Endulzante <- "SU"
}
}
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
tabla <- stack(as.data.frame(orinaFlav[,-1]))
tabla$Condiciones <- rep(orinaFlav$X, 8)
tabla$Endulzante <- rep("SA", nrow(tabla))
tabla$Tiempo <- rep("0", nrow(tabla))
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = tabla$Condiciones[i])){
tabla$Endulzante <- "ST"
}
else if (grepl(pattern = "B", x = tabla$Condiciones[i])){
tabla$Endulzante <- "SU"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = tabla$Condiciones[i])){
tabla$Tiempo <- "Final"
}
}
tabla
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = tabla$Condiciones[i])){
tabla$Endulzante <- "ST"
}
else if (grepl(pattern = "B", x = tabla$Condiciones[i])){
tabla$Endulzante <- "SU"
}
}
tabla
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = tabla$Condiciones[i])){
tabla$Endulzante <- "ST"
}
else if (grepl(pattern = "B", x = tabla$Condiciones[i])){
tabla$Endulzante <- "SU"
}
}
tabla
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
tabla <- stack(as.data.frame(orinaFlav[,-1]))
tabla$Condiciones <- rep(orinaFlav$X, 8)
tabla$Endulzante <- rep("SA", nrow(tabla))
tabla$Tiempo <- rep("0", nrow(tabla))
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = tabla$Condiciones[i])){
tabla$Endulzante[i] <- "ST"
}
else if (grepl(pattern = "B", x = tabla$Condiciones[i])){
tabla$Endulzante[i] <- "SU"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = tabla$Condiciones[i])){
tabla$Tiempo[i] <- "Final"
}
}
tabla
fviz_nbclust(x = orinaFlav, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(tabla$values), nstart = 50)
fviz_nbclust(x = tabla, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(tabla$values), nstart = 50)
get_dist(tabla$values)
fviz_nbclust(x = tabla, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(tabla$values), nstart = 50)
fviz_nbclust(x = tabla, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(tabla$values), nstart = 50)
get_dist(tabla$values)
fviz_nbclust(x = tabla, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(tabla$values, method = "euclidean"), nstart = 50)
get_dist(tabla$values, method = "euclidean")
dist(tabla$values, method = "euclidean")
dist(tabla, method = "euclidean")
fviz_nbclust(x = tabla, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(tabla$values), nstart = 50)
is.na(tabla$values)
any(is.na(tabla$values))
tabla$values
na.omit(tabla$values)
fviz_nbclust(x = na.omit(tabla), FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(tabla$values), nstart = 50)
fviz_nbclust(x = na.omit(tabla$values), FUNcluster = kmeans, method = "wss", k.max = 10,
)
fviz_nbclust(x = na.omit(tabla$values), FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(na.omit(tabla$values)), nstart = 50)
set.seed(123)
km_clusters <- kmeans(x = tabla$values, centers = 3, nstart = 50)
plot(kmeans)
summary(kmeans)
plot(km_clusters)
summary(km_clusters)
fviz_cluster(object = km_clusters, data = tabla, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Clustering K-means - Regulados positivamente X-A") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
fviz_cluster(object = km_clusters, data = tabla$values, show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Clustering K-means - Regulados positivamente X-A") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
library(factoextra)
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
View(orinaFlav)
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
# tabla <- stack(as.data.frame(orinaFlav[,-1]))
# tabla$Condiciones <- rep(orinaFlav$X, 8)
orinaFlav$Endulzante <- rep("SA", nrow(tabla))
orinaFlav$Tiempo <- rep("0", nrow(tabla))
orinaFlav <- read.csv("data/cronicoOrinaFlav.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
# tabla <- stack(as.data.frame(orinaFlav[,-1]))
# tabla$Condiciones <- rep(orinaFlav$X, 8)
orinaFlav$Endulzante <- rep("SA", nrow(orinaFlav))
orinaFlav$Tiempo <- rep("0", nrow(orinaFlav))
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = orinaFlav$X[i])){
orinaFlav$Endulzante[i] <- "ST"
}
else if (grepl(pattern = "B", x = orinaFlav$Condiciones[i])){
orinaFlav$Endulzante[i] <- "SU"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = orinaFlav$Condiciones[i])){
orinaFlav$Tiempo[i] <- "Final"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = orinaFlav$X[i])){
orinaFlav$Endulzante[i] <- "ST"
}
else if (grepl(pattern = "B", x = orinaFlav$X[i])){
orinaFlav$Endulzante[i] <- "SU"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = orinaFlav$X[i])){
orinaFlav$Tiempo[i] <- "Final"
}
}
orinaFlav
View(orinaFlav)
fviz_nbclust(x = orinaFlav, FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(orinaFlav[,c(2,3,4,5,6,7,8)]), nstart = 50)
fviz_nbclust(x = orinaFlav[orinaFlav[,c(2,3,4,5,6,7,8)]], FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(orinaFlav[,c(2,3,4,5,6,7,8)]), nstart = 50)
fviz_nbclust(x = orinaFlav[,c(2,3,4,5,6,7,8)], FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(orinaFlav[,c(2,3,4,5,6,7,8)]), nstart = 50)
km_clusters <- kmeans(x = orinaFlav, centers = 3, nstart = 50)
km_clusters <- kmeans(x = orinaFlav[,c(2,3,4,5,6,7,8)], centers = 3, nstart = 50)
fviz_cluster(object = km_clusters, data = orinaFlav[,c(2,3,4,5,6,7,8)],
show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Clustering K-means - Regulados positivamente X-A") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
km_clusters <- kmeans(x = orinaFlav[,c(2,3,4,5,6,7,8)], centers = 4, nstart = 50)
fviz_cluster(object = km_clusters, data = orinaFlav[,c(2,3,4,5,6,7,8)],
show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Clustering K-means - Regulados positivamente X-A") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
library(cluster)
fviz_nbclust(x =  orinaFlav[,c(2,3,4,5,6,7,8)], FUNcluster = pam, method = "wss", k.max = 10,
diss = dist( orinaFlav[,c(2,3,4,5,6,7,8)], method = "manhattan"))
pam_clusters <- pam(x =  orinaFlav[,c(2,3,4,5,6,7,8)], k = 3, metric = "manhattan")
fviz_cluster(object = pam_clusters, data =  orinaFlav[,c(2,3,4,5,6,7,8)], ellipse.type = "t",
repel = TRUE) +
theme_bw() +
labs(title = "Clustering PAM - Regulados positivamente X-A") +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5))
set.seed(123)
hc_euclidea_completo <- hclust(d = dist(x =  orinaFlav[,c(2,3,4,5,6,7,8)], method = "euclidean"),
method = "complete")
fviz_dend(x = hc_euclidea_completo, cex = 0.5, main = "Clustering jer?rquico por linkage completo - Regulados positivamente X-A",
sub = "Distancia eucl?dea", k= 4, rect = TRUE) +
theme(plot.title =  element_text(hjust = 0.5, size = 15))
hkmeans_cluster <- hkmeans(x =  orinaFlav[,c(2,3,4,5,6,7,8)],
hc.metric = "euclidean",
hc.method = "complete", k = 4)
fviz_cluster(object = hkmeans_cluster, pallete = "jco", repel = TRUE) +
theme_bw() + labs(title = "K-means Jerarquico - Regulados positivamente X-GL")+  theme(plot.title =  element_text(hjust = 0.5, size = 15))
hkmeans_cluster <- hkmeans(x =  orinaFlav[,c(2,3,4,5,6,7,8)],
hc.metric = "euclidean",
hc.method = "complete", k = 3)
fviz_cluster(object = hkmeans_cluster, pallete = "jco", repel = TRUE) +
theme_bw() + labs(title = "K-means Jerarquico - Regulados positivamente X-GL")+  theme(plot.title =  element_text(hjust = 0.5, size = 15))
mat_dist <- dist(x = cluster.up1, method = "euclidean")
mat_dist <- dist(x =  orinaFlav[,c(2,3,4,5,6,7,8)], method = "euclidean")
hc_euclidea_complete <- hclust(d = mat_dist, method = "complete")
hc_euclidea_average  <- hclust(d = mat_dist, method = "average")
cor(x = mat_dist, cophenetic(hc_euclidea_complete))
cor(x = mat_dist, cophenetic(hc_euclidea_average))
plot(hc_euclidea_average)
plot(hc_euclidea_complete)
orinaFlav <- read.csv("data/cronicoOrinaFlavLimpio.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
# tabla <- stack(as.data.frame(orinaFlav[,-1]))
# tabla$Condiciones <- rep(orinaFlav$X, 8)
orinaFlav$Endulzante <- rep("SA", nrow(orinaFlav))
orinaFlav$Tiempo <- rep("0", nrow(orinaFlav))
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = orinaFlav$X[i])){
orinaFlav$Endulzante[i] <- "ST"
}
else if (grepl(pattern = "B", x = orinaFlav$X[i])){
orinaFlav$Endulzante[i] <- "SU"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = orinaFlav$X[i])){
orinaFlav$Tiempo[i] <- "Final"
}
}
orinaFlav
fviz_nbclust(x = orinaFlav[,c(2,3,4,5,6,7,8)], FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(orinaFlav[,c(2,3,4,5,6,7,8)]), nstart = 50)
library(factoextra)
orinaFlav <- read.csv("data/cronicoOrinaFlavLimpio.csv", sep = ";", dec = ",")
orinaFlav[is.na(orinaFlav)]<-0
# tabla <- stack(as.data.frame(orinaFlav[,-1]))
# tabla$Condiciones <- rep(orinaFlav$X, 8)
orinaFlav$Endulzante <- rep("SA", nrow(orinaFlav))
orinaFlav$Tiempo <- rep("0", nrow(orinaFlav))
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "A", x = orinaFlav$X[i])){
orinaFlav$Endulzante[i] <- "ST"
}
else if (grepl(pattern = "B", x = orinaFlav$X[i])){
orinaFlav$Endulzante[i] <- "SU"
}
}
for (i in seq(1, nrow(orinaFlav))){
if (grepl(pattern = "F", x = orinaFlav$X[i])){
orinaFlav$Tiempo[i] <- "Final"
}
}
orinaFlav
fviz_nbclust(x = orinaFlav[,c(2,3,4,5,6,7,8)], FUNcluster = kmeans, method = "wss", k.max = 10,
diss = get_dist(orinaFlav[,c(2,3,4,5,6,7,8)]), nstart = 50)
set.seed(123)
km_clusters <- kmeans(x = orinaFlav[,c(2,3,4,5,6,7,8)], centers = 4, nstart = 50)
fviz_cluster(object = km_clusters, data = orinaFlav[,c(2,3,4,5,6,7,8)],
show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Clustering K-means - Regulados positivamente X-A") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
km_clusters <- kmeans(x = orinaFlav[,c(2,3,4,5,6,7,8)], centers = 3, nstart = 50)
fviz_cluster(object = km_clusters, data = orinaFlav[,c(2,3,4,5,6,7,8)],
show.clust.cent = TRUE,
ellipse.type = "euclid", star.plot = TRUE, repel = TRUE) +
labs(title = "Clustering K-means - Regulados positivamente X-A") +
theme_bw() +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
library(cluster)
fviz_nbclust(x =  orinaFlav[,c(2,3,4,5,6,7,8)], FUNcluster = pam, method = "wss", k.max = 10,
diss = dist( orinaFlav[,c(2,3,4,5,6,7,8)], method = "manhattan"))
pam_clusters <- pam(x =  orinaFlav[,c(2,3,4,5,6,7,8)], k = 5, metric = "manhattan")
fviz_cluster(object = pam_clusters, data =  orinaFlav[,c(2,3,4,5,6,7,8)], ellipse.type = "t",
repel = TRUE) +
theme_bw() +
labs(title = "Clustering PAM - Regulados positivamente X-A") +
theme(legend.position = "none",plot.title = element_text(hjust = 0.5))
pam_clusters$medoids
set.seed(123)
hc_euclidea_completo <- hclust(d = dist(x =  orinaFlav[,c(2,3,4,5,6,7,8)], method = "euclidean"),
method = "complete")
fviz_dend(x = hc_euclidea_completo, cex = 0.5, main = "Clustering jer?rquico por linkage completo - Regulados positivamente X-A",
sub = "Distancia eucl?dea", k= 4, rect = TRUE) +
theme(plot.title =  element_text(hjust = 0.5, size = 15))
hkmeans_cluster <- hkmeans(x =  orinaFlav[,c(2,3,4,5,6,7,8)],
hc.metric = "euclidean",
hc.method = "complete", k = 3)
fviz_cluster(object = hkmeans_cluster, pallete = "jco", repel = TRUE) +
theme_bw() + labs(title = "K-means Jerarquico - Regulados positivamente X-GL")+  theme(plot.title =  element_text(hjust = 0.5, size = 15))
mat_dist <- dist(x =  orinaFlav[,c(2,3,4,5,6,7,8)], method = "euclidean")
hc_euclidea_complete <- hclust(d = mat_dist, method = "complete")
hc_euclidea_average  <- hclust(d = mat_dist, method = "average")
cor(x = mat_dist, cophenetic(hc_euclidea_complete))
cor(x = mat_dist, cophenetic(hc_euclidea_average))
plot(hc_euclidea_average)
plot(hc_euclidea_complete)q
plot(hc_euclidea_average)
plot(hc_euclidea_complete)q
plot(hc_euclidea_complete)

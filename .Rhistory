}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2, common.legend = TRUE)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Talla,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2, common.legend = TRUE)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Endulzante,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2, common.legend = TRUE)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos uwu",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
library(NbClust)
install.packages("NbClust")
numero_clusters <- NbClust(data = set.A_rescaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "alllong")
library(NbClust)
numero_clusters <- NbClust(data = set.A_rescaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "alllong")
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "alllong")
as.matrix(set.A_rescaled)
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "silhouette")
numero_clusters
fviz_nbclust(numero_clusters)
library(factoextra)
library(dplyr)
library(scales)
fviz_nbclust(numero_clusters)
numero_clusters <- NbClust(data = dist(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = as.matrix(set.A_rescaled), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = as.matrix(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
fviz_nbclust(numero_clusters)
numero_clusters <- NbClust(data = as.matrix(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 10, method = "kmeans", index = "all")
scale(set.A_num)
?NbClust
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 5, method = "kmeans", index = "all")
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 5, method = "kmeans", index = "gap")
fviz_nbclust(numero_clusters)
numero_clusters <- NbClust(data = scale(set.A_num), distance = "euclidean", min.nc = 2,
max.nc = 5, method = "kmeans", index = c("kl","ch","hartigan",  "cindex", "db"))
library(caret)
transparentTheme(trans = .9)
library(caret)
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
c_O_A.A$Delta.IRCV <- c_O_A.A$IRCV.Final - c_O_A.A$IRCV.inicial
c_O_A.A$Delta.Bpmin <- c_O_A.A$Bpmin.final - c_O_A.A$Bpmin.inicial
c_O_A.A$Delta.Bpmax <- c_O_A.A$Bpmax.final - c_O_A.A$Bpmax.inicial
c_O_A.A$Delta.Frec <- c_O_A.A$Frec.final - c_O_A.A$Frec.inicial
set.A <- subset(c_O_A.A, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
transparentTheme(trans = .9)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
library(AppliedPredictiveModeling)
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
c_O_A.A$Delta.IRCV <- c_O_A.A$IRCV.Final - c_O_A.A$IRCV.inicial
c_O_A.A$Delta.Bpmin <- c_O_A.A$Bpmin.final - c_O_A.A$Bpmin.inicial
c_O_A.A$Delta.Bpmax <- c_O_A.A$Bpmax.final - c_O_A.A$Bpmax.inicial
c_O_A.A$Delta.Frec <- c_O_A.A$Frec.final - c_O_A.A$Frec.inicial
set.A <- subset(c_O_A.A, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
transparentTheme(trans = .9)
featurePlot(x = set.A,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 3))
set.A
library(caret)
library(AppliedPredictiveModeling)
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
c_O_A.A$Delta.IRCV <- c_O_A.A$IRCV.Final - c_O_A.A$IRCV.inicial
c_O_A.A$Delta.Bpmin <- c_O_A.A$Bpmin.final - c_O_A.A$Bpmin.inicial
c_O_A.A$Delta.Bpmax <- c_O_A.A$Bpmax.final - c_O_A.A$Bpmax.inicial
c_O_A.A$Delta.Frec <- c_O_A.A$Frec.final - c_O_A.A$Frec.inicial
set.A <- subset(c_O_A.A, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
transparentTheme(trans = .9)
featurePlot(x = set.A,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 3))
featurePlot(x = set.A,
y = set.A$Sexo,
plot = "density")
set.A$Sexo
set.A
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density")
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 1),
auto.key = list(columns = 3))
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(8, 1),
auto.key = list(columns = 3))
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(8,2),
auto.key = list(columns = 3))
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(6,2),
auto.key = list(columns = 3))
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(6,2),
auto.key = list(columns = 3))
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "ellipse",
## Add a key at the top
auto.key = list(columns = 2))
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
library(caret)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(set.A_num, set.A$Sexo, sizes=c(1:8), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(scale(set.A_num), set.A$Sexo, sizes=c(1:8), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
set.A_num[, 1:5]
# run the RFE algorithm
results <- rfe(scale(set.A_num[, 1:5]), set.A$Sexo, sizes=c(1:8), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
library(factoextra)
library(dplyr)
library(scales)
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
set.A <- c_O_A.A[,-c(1,2,4)]
set.A_num <- set.A[,-c(1,7,26)]
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
library(purrr)
library(ggpubr)
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos uwu",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
km_datos_A <- kmeans(x = set.A_rescaled, centers = 2)
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
km_datos_simulados <- kmeans(x = datos_simulados, centers = 2)
p2 <- fviz_cluster(object = km_datos_simulados, data = datos_simulados,
ellipse.type = "norm", geom = "point",
main = "Datos simulados", stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
# Hierarchical clustering
p3 <- fviz_dend(x = hclust(dist(set.A_rescaled)), k = 2, k_colors = "jco",
show_labels = FALSE, main = "Datos sexo")
p4 <- fviz_dend(x = hclust(dist(datos_simulados)), k = 2, k_colors = "jco",
show_labels = FALSE, main = "Datos simulados")
ggarrange(p1, p2)
ggarrange(p3, p4)
heatmap(x = as.matrix(set.A_rescaled), scale = "none",
distfun = function(x){dist(x, method = "euclidean")},
hclustfun = function(x){hclust(x, method = "average")},
cexRow = 0.7)
library(pheatmap)
pheatmap(mat = as.matrix(set.A_rescaled), scale = "none", clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean", clustering_method = "average",
cutree_rows = 4, fontsize = 6)
library(caret)
library(AppliedPredictiveModeling)
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
c_O_A.A$Delta.IRCV <- c_O_A.A$IRCV.Final - c_O_A.A$IRCV.inicial
c_O_A.A$Delta.Bpmin <- c_O_A.A$Bpmin.final - c_O_A.A$Bpmin.inicial
c_O_A.A$Delta.Bpmax <- c_O_A.A$Bpmax.final - c_O_A.A$Bpmax.inicial
c_O_A.A$Delta.Frec <- c_O_A.A$Frec.final - c_O_A.A$Frec.inicial
set.A <- subset(c_O_A.A, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
transparentTheme(trans = .9)
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(6,2),
auto.key = list(columns = 3))
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "ellipse",
## Add a key at the top
auto.key = list(columns = 2))
featurePlot(x = set.A_num,
y = set.A$Sexo,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(2,1),
auto.key = list(columns = 3))
gc()
gc()
c_O_A.A <- read.csv("data/cronicoOrinaAnt_Antro.csv")
c_O_A.A$Endulzante <- factor(c_O_A.A$Endulzante, levels = c("SA", "ST", "SU"))
c_O_A.A$Sexo <- factor(c_O_A.A$Sexo, levels = c("HOMBRE", "MUJER"))
c_O_A.A$Tiempo <- factor(c_O_A.A$Tiempo, levels = c("0", "Final"))
c_O_A.A$Delta.IRCV <- c_O_A.A$IRCV.Final - c_O_A.A$IRCV.inicial
c_O_A.A$Delta.Bpmin <- c_O_A.A$Bpmin.final - c_O_A.A$Bpmin.inicial
c_O_A.A$Delta.Bpmax <- c_O_A.A$Bpmax.final - c_O_A.A$Bpmax.inicial
c_O_A.A$Delta.Frec <- c_O_A.A$Frec.final - c_O_A.A$Frec.inicial
set.A <- subset(c_O_A.A, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
set.A_rescaled <- scale(set.a_num)
set.A_rescaled <- scale(set.A_num)
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
library(deplyr)
library(dplyr)
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
library(scales)
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
library(ggpubr)
library(purrr)
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
library(factoextra)
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)
km_datos_A <- kmeans(x = set.A_rescaled, centers = 2)
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
km_datos_simulados <- kmeans(x = datos_simulados, centers = 2)
p2 <- fviz_cluster(object = km_datos_simulados, data = datos_simulados,
ellipse.type = "norm", geom = "point",
main = "Datos simulados", stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
# Hierarchical clustering
p3 <- fviz_dend(x = hclust(dist(set.A_rescaled)), k = 2, k_colors = "jco",
show_labels = FALSE, main = "Datos sexo")
p4 <- fviz_dend(x = hclust(dist(datos_simulados)), k = 2, k_colors = "jco",
show_labels = FALSE, main = "Datos simulados")
ggarrange(p1, p2)
ggarrange(p3, p4)
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled, habillage = set.A$Sexo,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
p2 <- fviz_cluster(object = km_datos_simulados, data = datos_simulados, habillage = set.A$Sexo,
ellipse.type = "norm", geom = "point",
main = "Datos simulados", stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
ggarrange(p1, p2)
library(clustertend)
set.seed(101)
hopkins(set.A_rescaled, n = nrow(set.A_rescaled)-1)
hopkins(datos_simulados, n = nrow(datos_simulados)-1)
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled, habillage = set.A$Sexo,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
theme_bw()
km_datos_simulados <- kmeans(x = datos_simulados, centers = 2)
p2 <- fviz_cluster(object = km_datos_simulados, data = datos_simulados, habillage = set.A$Sexo,
ellipse.type = "norm", geom = "point",
main = "Datos simulados", stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
# Hierarchical clustering
p3 <- fviz_dend(x = hclust(dist(set.A_rescaled)), k = 2, k_colors = "jco",
show_labels = FALSE, main = "Datos sexo")
p4 <- fviz_dend(x = hclust(dist(datos_simulados)), k = 2, k_colors = "jco",
show_labels = FALSE, main = "Datos simulados")
ggarrange(p1, p2)
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none") + geom_point(aes(shape = set.A$Sexo), alpha = 0.5)
p2 <- fviz_cluster(object = km_datos_simulados, data = datos_simulados, habillage = set.A$Sexo,
ellipse.type = "norm", geom = "point",
main = "Datos simulados", stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
ggarrange(p1, p2)
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
theme_bw() + geom_point(aes(shape = set.A$Sexo), alpha = 0.5)
p1
aes(shape = set.A$Sexo)
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
geom_point(aes(shape = set.A$Sexo), alpha = 0.5)
p1
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco") +
geom_point(aes(shape = set.A$Sexo), show.legend = TRUE)
p1
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco", show.legenf = F) +
geom_point(aes(shape = set.A$Sexo), show.legend = TRUE)
p1
p1 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = "Datos sexo",
stand = FALSE, palette = "jco", show.legend = F) +
geom_point(aes(shape = set.A$Sexo), show.legend = TRUE)
p1
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = "PCA - datos sexo",
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = "PCA - datos simulados", pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
ggarrange(p1, p2)#, common.legend = TRUE)

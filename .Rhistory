### Estadístico de Hopkins ----
set.seed(101)
hopkins(set.A_rescaled, n = nrow(set.A_rescaled)-1)
hopkins(datos_simulados, n = nrow(datos_simulados)-1)
### VAT (Comparación visual) ----
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos sexo", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
preprocessTablas1("data/","cronicoPlasmaFlav_Antro.csv")
preprocessTablas1("data/","cronicoPlasmaAnt_Antro.csv")
resultadoA_O_F.A <- preprocessTablas1("data/","cronicoOrinaFlav_Antro.csv")
View(c_O_A.A)
preprocessTablas1 <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
# Validación de método de clustering
## Manual
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Tiempo,
geom = "point", title = paste("PCA - datos sexo", nombreTabla),
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = paste("PCA - datos simulados",nombreTabla), pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
print(ggarrange(p1, p2))#, common.legend = TRUE)
print(fviz_contrib(pca_datos_A, choice="var", top = 13))
### Aplicamos clustering
# K-means clustering
km_datos_A <- kmeans(x = set.A_rescaled, centers = 2)
p3 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = paste("Datos sexo", nombreTabla),
stand = FALSE, palette = "jco", show.legend = F) +
geom_point(aes(shape = set.A$Tiempo), show.legend = TRUE)
km_datos_simulados <- kmeans(x = datos_simulados, centers = 2)
p4 <- fviz_cluster(object = km_datos_simulados, data = datos_simulados, habillage = set.A$Tiempo,
ellipse.type = "norm", geom = "point",
main = paste("Datos simulados", nombreTabla), stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
# Hierarchical clustering
p5 <- fviz_dend(x = hclust(dist(set.A_rescaled)), k = 2, k_colors = "jco",
show_labels = FALSE, main = paste("Datos sexo", nombreTabla))
p6 <- fviz_dend(x = hclust(dist(datos_simulados)), k = 2, k_colors = "jco",
show_labels = FALSE, main = paste("Datos simulados", nombreTabla))
print(ggarrange(p3, p4))
print(ggarrange(p5, p6))
### Estadístico de Hopkins ----
set.seed(101)
hopkins(set.A_rescaled, n = nrow(set.A_rescaled)-1)
hopkins(datos_simulados, n = nrow(datos_simulados)-1)
### VAT (Comparación visual) ----
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos sexo", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
clusteringVarios <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
# Validación de método de clustering
## Manual
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Sexo,
geom = "point", title = paste("PCA - datos sexo", nombreTabla),
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = paste("PCA - datos simulados",nombreTabla), pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
print(ggarrange(p1, p2))#, common.legend = TRUE)
print(fviz_contrib(pca_datos_A, choice="var", top = 13))
### Aplicamos clustering
# K-means clustering
km_datos_A <- kmeans(x = set.A_rescaled, centers = 2)
p3 <- fviz_cluster(object = km_datos_A, data = set.A_rescaled,
ellipse.type = "norm", geom = "point", main = paste("Datos sexo", nombreTabla),
stand = FALSE, palette = "jco", show.legend = F) +
geom_point(aes(shape = set.A$Sexo), show.legend = TRUE)
km_datos_simulados <- kmeans(x = datos_simulados, centers = 2)
p4 <- fviz_cluster(object = km_datos_simulados, data = datos_simulados, habillage = set.A$Sexo,
ellipse.type = "norm", geom = "point",
main = paste("Datos simulados", nombreTabla), stand = FALSE, palette = "jco") +
theme_bw() + theme(legend.position = "none")
# Hierarchical clustering
p5 <- fviz_dend(x = hclust(dist(set.A_rescaled)), k = 2, k_colors = "jco",
show_labels = FALSE, main = paste("Datos sexo", nombreTabla))
p6 <- fviz_dend(x = hclust(dist(datos_simulados)), k = 2, k_colors = "jco",
show_labels = FALSE, main = paste("Datos simulados", nombreTabla))
print(ggarrange(p3, p4))
print(ggarrange(p5, p6))
### Estadístico de Hopkins ----
set.seed(101)
hopkins(set.A_rescaled, n = nrow(set.A_rescaled)-1)
hopkins(datos_simulados, n = nrow(datos_simulados)-1)
### VAT (Comparación visual) ----
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos sexo", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
preprocessTablas1("data/","cronicoOrinaAnt_Antro.csv")
library(dplyr)
library(scales)
library(purrr)
library(ggpubr)
library(factoextra)
library(clustertend)
preprocessTablas1("data/","cronicoOrinaAnt_Antro.csv")
preprocessTablas <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
return(set.A, set.A_rescaled)
}
tabla1, tabla2 <- preprocessTablas("data/", "agudoOrinaAntLimpio.csv")
listaTablas <- preprocessTablas("data/", "agudoOrinaAntLimpio.csv")
preprocessTablas <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
return(list(set.A, set.A_rescaled))
}
listaTablas <- preprocessTablas("data/", "agudoOrinaAntLimpio.csv")
listaTablas <- preprocessTablas("data/", "data/cronicoOrinaFlav_Antro.csv.csv")
listaTablas <- preprocessTablas("data/", "cronicoOrinaFlav_Antro.csv")
preprocessTablas <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
return(list(set.A = tablaRaw, set.A_rescaled = tablaNum))
}
listaTablas <- preprocessTablas("data/", "cronicoOrinaFlav_Antro.csv")
preprocessTablas <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
return(list(tablaRaw = set.A, tablaNum = set.A_rescaled))
}
listaTablas <- preprocessTablas("data/", "cronicoOrinaFlav_Antro.csv")
listaTablas$tablaRaw
preprocessTablas <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
return(list(tablaRaw = set.A, tablaNum = set.A_rescaled))
}
library(dplyr)
library(scales)
library(purrr)
library(ggpubr)
library(factoextra)
library(clustertend)
preprocessTablas <- function(root, nombreTabla) {
# Getting data ready
rootTabla <- paste0(root, nombreTabla)
tabla <- read.csv(rootTabla)
# Make factors of categorical features, deltaing intial-final features
tabla$Endulzante <- factor(tabla$Endulzante, levels = c("SA", "ST", "SU"))
tabla$Sexo <- factor(tabla$Sexo, levels = c("HOMBRE", "MUJER"))
tabla$Tiempo <- factor(tabla$Tiempo, levels = c("0", "Final"))
tabla$Delta.IRCV <- tabla$IRCV.Final - tabla$IRCV.inicial
tabla$Delta.Bpmin <- tabla$Bpmin.final - tabla$Bpmin.inicial
tabla$Delta.Bpmax <- tabla$Bpmax.final - tabla$Bpmax.inicial
tabla$Delta.Frec <- tabla$Frec.final - tabla$Frec.inicial
# Removing of trivial redundant and useless features
set.A <- subset(tabla, select =-c(X.1, numVol, X, Peso.inicial, Peso.final, Talla, IMC.Inicial, IMC.Final,
Grasa.inicial, Grasa.final, IRCV.Final, IRCV.inicial, Bpmin.final,
Bpmin.inicial, Bpmax.final, Bpmax.inicial, Frec.final, Frec.inicial))
# Only numerical features
set.A_num <- subset(set.A, select=-c(Endulzante, Sexo, Tiempo))
#Rescaling, can use "set.A_rescaled <- scale(set.A_num)" too
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
return(list(tablaRaw = set.A, tablaNum = set.A_rescaled))
}
checkCluster <- function(root, nombreTabla){
listaTablas <- preprocessTablas(root, nombreTabla)
set.A_rescaled <- listaTablas$tablaNum
# Validación de método de clustering
## Manual
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Tiempo,
geom = "point", title = paste("PCA - Datos ", nombreTabla),
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = paste("PCA - datos simulados ",nombreTabla), pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
print(ggarrange(p1, p2))#, common.legend = TRUE)
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos ", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados ", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
checkCluster("data/", "cronicoOrinaFlav_Antro.csv")
checkCluster <- function(root, nombreTabla){
listaTablas <- preprocessTablas(root, nombreTabla)
set.A_rescaled <- listaTablas$tablaNum
set.A <- listaTablas$tablaRaw
# Validación de método de clustering
## Manual
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A, habillage = set.A$Tiempo,
geom = "point", title = paste("PCA - Datos ", nombreTabla),
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = paste("PCA - datos simulados ",nombreTabla), pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
print(ggarrange(p1, p2))#, common.legend = TRUE)
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos ", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados ", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
checkCluster("data/", "cronicoOrinaFlav_Antro.csv")
checkCluster <- function(root, nombreTabla){
listaTablas <- preprocessTablas(root, nombreTabla)
set.A_rescaled <- listaTablas$tablaNum
set.A <- listaTablas$tablaRaw
# Validación de método de clustering
## Manual
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A,
geom = "point", title = paste("PCA - Datos ", nombreTabla),
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = paste("PCA - datos simulados ",nombreTabla), pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
print(ggarrange(p1, p2), common.legend = TRUE)
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos ", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados ", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
checkCluster("data/", "cronicoOrinaFlav_Antro.csv")
checkCluster("data/", "cronicoOrinaFlav_Antro.csv")
checkCluster("data/", "cronicoOrinaAnt_Antro.csv")
checkCluster("data/", "cronicoPlasmaFlav_Antro.csv")
checkCluster("data/", "cronicoPlasmaAnt_Antro.csv")
orinaFlav <- preprocessTablas("data/", "cronicoOrinaFlav_Antro.csv")
orinaFlav$tablaRaw
View(orinaFlav$tablaRaw)
orinaFlavRaw <- orinaFlav$tablaRaw
orinaFlavRaw_0 <- orinaFlavRaw[, "Tiempo" == "0"]
orinaFlavRaw_0 <- subset(orinaFlavRaw, Tiempo == "0"]
orinaFlavRaw_F
orinaFlavRaw_0 <- subset(orinaFlavRaw, Tiempo == "0"]
orinaFlavRaw_F
orinaFlavRaw_0 <- subset(orinaFlavRaw, Tiempo == "0")
orinaFlavRaw_F <- subset(orinaFlavRaw, Tiempo == "F")
orinaFlavRaw_F <- subset(orinaFlavRaw, Tiempo == "Final")
checkCluster <- function(tabla){
set.A_rescaled <- tabla
# Validación de método de clustering
## Manual
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A,
geom = "point", title = paste("PCA - Datos ", nombreTabla),
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = paste("PCA - datos simulados ",nombreTabla), pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
print(ggarrange(p1, p2), common.legend = TRUE)
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos ", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados ", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
checkCluster(orinaFlavRaw_0)
checkCluster(orinaFlavRaw_F)
orinaFlavNum <- orinaFlav$tablaNum
orinaFlavNum_0 <- subset(orinaFlavNum, Tiempo == "0")
orinaFlavNum_F <- subset(orinaFlavNum, Tiempo == "Final")
set.A_num <- subset(orinaFlavRaw, select=-c(Endulzante, Sexo))
set.A_rescaled <- set.A_num %>% mutate_each_(list(~rescale(.) %>% as.vector),
vars = colnames(set.A_num))
orinaFlavNumTiempo <- cbind(orinaFlavNum, orinaFlavRaw$Tiempo)
orinaFlavNum_0 <- subset(orinaFlavNumTiempo, Tiempo == "0")
orinaFlavNum_F <- subset(orinaFlavNumTiempo, Tiempo == "Final")
orinaFlavNumTiempo <- cbind(orinaFlavNum, orinaFlavRaw$Tiempo)
orinaFlavNum_0 <- subset(orinaFlavNumTiempo, Tiempo == "0")
orinaFlavNumTiempo <- cbind(orinaFlavNum, Tiempo = orinaFlavRaw$Tiempo)
orinaFlavNum_0 <- subset(orinaFlavNumTiempo, Tiempo == "0")
orinaFlavNum_F <- subset(orinaFlavNumTiempo, Tiempo == "Final")
checkCluster(orinaFlavRaw_0)
checkCluster(orinaFlavRaw_F)
orinaFlavNum_0 <- subset(orinaFlavNumTiempo, Tiempo == "0", select = -Tiempo)
orinaFlavNum_F <- subset(orinaFlavNumTiempo, Tiempo == "Final", select = -Tiempo)
checkCluster(orinaFlavRaw_0)
orinaFlavRaw_0
checkCluster(orinaFlavNum_0)
checkCluster(orinaFlavNum_F)
checkCluster <- function(tabla){
nombreTabla <- deparse(quote(tabla))
set.A_rescaled <- tabla
# Validación de método de clustering
## Manual
datos_simulados <- map_df(set.A_rescaled,
.f = function(x){runif(n = length(x),
min = min(x),
max = max(x))
}
)
pca_datos_A      <- prcomp(set.A_rescaled)
pca_datos_simulados <- prcomp(datos_simulados)
p1 <- fviz_pca_ind(X = pca_datos_A,
geom = "point", title = paste("PCA - Datos ", nombreTabla),
pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
p2 <- fviz_pca_ind(X = pca_datos_simulados, geom = "point",
title = paste("PCA - datos simulados ",nombreTabla), pallete = "jco") +
theme_bw() + theme(legend.position = "bottom")
print(ggarrange(p1, p2), common.legend = TRUE)
dist_datos_A      <- dist(set.A_rescaled, method = "euclidean")
dist_datos_simulados <- dist(datos_simulados, method = "euclidean")
p7 <- fviz_dist(dist.obj = dist_datos_A, show_labels = FALSE) +
labs(title = paste("Datos ", nombreTabla)) + theme(legend.position = "bottom")
p8 <- fviz_dist(dist.obj = dist_datos_simulados, show_labels = FALSE) +
labs(title = paste("Datos simulados ", nombreTabla)) + theme(legend.position = "bottom")
print(ggarrange(p7, p8))
}
checkCluster(orinaFlavNum_0)
checkCluster(orinaFlavNum_F)
